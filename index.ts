/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/account_roles/": {
    get: operations["account_roles_list"];
    post: operations["account_roles_create"];
  };
  "/account_roles/{id}/": {
    get: operations["account_roles_retrieve"];
    put: operations["account_roles_update"];
    delete: operations["account_roles_destroy"];
    patch: operations["account_roles_partial_update"];
  };
  "/account_roles/{id}/notify/": {
    post: operations["account_roles_notify_create"];
  };
  "/account_roles/{id}/token/": {
    get: operations["account_roles_token_retrieve"];
  };
  "/accounts/": {
    get: operations["accounts_list"];
  };
  "/accounts/{id}/": {
    get: operations["accounts_retrieve"];
    put: operations["accounts_update"];
    patch: operations["accounts_partial_update"];
  };
  "/accounts/{id}/braintree_customer/": {
    get: operations["accounts_braintree_customer_retrieve"];
  };
  "/accounts/{id}/managers/": {
    get: operations["accounts_managers_retrieve"];
    post: operations["accounts_managers_create"];
    delete: operations["accounts_managers_destroy"];
  };
  "/accounts/{id}/stripe_attach_payment_method/": {
    /**
     * Action to (re)set the account stripe customer and payment method to new values.
     * By default the attached method will also be set as default.
     * If this is not desired, you can send
     *
     *     'set_default': False
     */
    put: operations["accounts_stripe_attach_payment_method_update"];
  };
  "/accounts/{id}/stripe_create_setup_intent/": {
    /** Action to start a new setup intent. */
    put: operations["accounts_stripe_create_setup_intent_update"];
  };
  "/accounts/{id}/stripe_detach_payment_method/": {
    /**
     * Detached payment method from the customer.
     * The payment method itself will remain somewhere in stripe, but as its no longer linked to the customer,
     * it might as well be deleted for us
     */
    put: operations["accounts_stripe_detach_payment_method_update"];
  };
  "/accounts/{id}/stripe_get_payment_method/": {
    /**
     * Fetch a single payment method from stripe.
     * This will also return non-attached payment methods (from setup intents for example)
     */
    get: operations["accounts_stripe_get_payment_method_retrieve"];
  };
  "/accounts/{id}/stripe_get_setup_attempt/": {
    /** Fetch a single setup intent */
    get: operations["accounts_stripe_get_setup_attempt_retrieve"];
  };
  "/accounts/{id}/stripe_get_setup_intent/": {
    /** Fetch a single setup intent */
    get: operations["accounts_stripe_get_setup_intent_retrieve"];
  };
  "/accounts/{id}/stripe_payment_methods/": {
    /**
     * Fetch all customer payment methods.
     * This includes all attached payment methods, default method_id
     */
    get: operations["accounts_stripe_payment_methods_retrieve"];
  };
  "/accounts/{id}/stripe_set_default_payment_method/": {
    /** Action to set a payment method to default. */
    put: operations["accounts_stripe_set_default_payment_method_update"];
  };
  "/accounts/{id}/stripe_setup_intents/": {
    /** Fetch existing setup intents */
    get: operations["accounts_stripe_setup_intents_retrieve"];
  };
  "/accounts/{id}/workers/": {
    get: operations["accounts_workers_retrieve"];
    post: operations["accounts_workers_create"];
    delete: operations["accounts_workers_destroy"];
  };
  "/addons/": {
    get: operations["addons_list"];
  };
  "/addons/{id}/": {
    get: operations["addons_retrieve"];
  };
  "/authenticate/": {
    post: operations["authenticate_create"];
  };
  "/billing/customers/": {
    get: operations["billing_customers_list"];
    post: operations["billing_customers_create"];
  };
  "/billing/customers/{id}/": {
    get: operations["billing_customers_retrieve"];
    put: operations["billing_customers_update"];
    patch: operations["billing_customers_partial_update"];
  };
  "/billing/customers/{id}/client_token/": {
    get: operations["billing_customers_client_token_retrieve"];
  };
  "/billing/invoices/": {
    get: operations["billing_invoices_list"];
  };
  "/billing/invoices/{id}/": {
    get: operations["billing_invoices_retrieve"];
    put: operations["billing_invoices_update"];
    patch: operations["billing_invoices_partial_update"];
  };
  "/billing/invoices/{id}/mark_as_paid/": {
    post: operations["billing_invoices_mark_as_paid_create"];
  };
  "/billing/stripe_payments/": {
    get: operations["billing_stripe_payments_list"];
  };
  "/billing/stripe_payments/{id}/": {
    get: operations["billing_stripe_payments_retrieve"];
  };
  "/billing/transactions/": {
    get: operations["billing_transactions_list"];
  };
  "/billing/transactions/{id}/": {
    get: operations["billing_transactions_retrieve"];
  };
  "/client_roles/": {
    get: operations["client_roles_list"];
    post: operations["client_roles_create"];
  };
  "/client_roles/{id}/": {
    get: operations["client_roles_retrieve"];
    put: operations["client_roles_update"];
    patch: operations["client_roles_partial_update"];
  };
  "/client_roles/{id}/notify/": {
    post: operations["client_roles_notify_create"];
  };
  "/clients/": {
    get: operations["clients_list"];
    post: operations["clients_create"];
  };
  "/clients/{id}/": {
    get: operations["clients_retrieve"];
    put: operations["clients_update"];
    patch: operations["clients_partial_update"];
  };
  "/configurations/": {
    get: operations["configurations_list"];
  };
  "/contact_address_import/": {
    get: operations["contact_address_import_list"];
    post: operations["contact_address_import_create"];
  };
  "/contact_address_import/{id}/": {
    get: operations["contact_address_import_retrieve"];
  };
  "/contact_addresses/": {
    get: operations["contact_addresses_list"];
    post: operations["contact_addresses_create"];
  };
  "/contact_addresses/{id}/": {
    get: operations["contact_addresses_retrieve"];
    put: operations["contact_addresses_update"];
    patch: operations["contact_addresses_partial_update"];
  };
  "/devices/": {
    get: operations["devices_list"];
    post: operations["devices_create"];
  };
  "/devices/{id}/": {
    get: operations["devices_retrieve"];
  };
  "/docs/schema/": {
    /**
     * OpenApi3 schema for this API. Format can be selected via content negotiation.
     *
     * - YAML: application/vnd.oai.openapi
     * - JSON: application/vnd.oai.openapi+json
     */
    get: operations["docs_schema_retrieve"];
  };
  "/documents/": {
    get: operations["documents_list"];
    post: operations["documents_create"];
  };
  "/documents/{id}/": {
    get: operations["documents_retrieve"];
    delete: operations["documents_destroy"];
  };
  "/emails/": {
    get: operations["emails_list"];
    post: operations["emails_create"];
  };
  "/emails/{id}/": {
    get: operations["emails_retrieve"];
    put: operations["emails_update"];
    delete: operations["emails_destroy"];
    patch: operations["emails_partial_update"];
  };
  "/emails/{id}/resend/": {
    post: operations["emails_resend_create"];
  };
  "/exports/": {
    get: operations["exports_list"];
    post: operations["exports_create"];
  };
  "/exports/{id}/": {
    get: operations["exports_retrieve"];
    put: operations["exports_update"];
    delete: operations["exports_destroy"];
    patch: operations["exports_partial_update"];
  };
  "/file_uploads/": {
    get: operations["file_uploads_list"];
    post: operations["file_uploads_create"];
  };
  "/file_uploads/{id}/": {
    get: operations["file_uploads_retrieve"];
  };
  "/formrules/": {
    get: operations["formrules_list"];
    post: operations["formrules_create"];
  };
  "/formrules/{id}/": {
    get: operations["formrules_retrieve"];
    put: operations["formrules_update"];
    delete: operations["formrules_destroy"];
    patch: operations["formrules_partial_update"];
  };
  "/integrations/": {
    post: operations["integrations_create"];
  };
  "/metafields/": {
    get: operations["metafields_list"];
    post: operations["metafields_create"];
  };
  "/metafields/{id}/": {
    get: operations["metafields_retrieve"];
    put: operations["metafields_update"];
    delete: operations["metafields_destroy"];
    patch: operations["metafields_partial_update"];
  };
  "/notification_templates/": {
    get: operations["notification_templates_list"];
    post: operations["notification_templates_create"];
  };
  "/notification_templates/{id}/": {
    get: operations["notification_templates_retrieve"];
    put: operations["notification_templates_update"];
    delete: operations["notification_templates_destroy"];
    patch: operations["notification_templates_partial_update"];
  };
  "/notification_templates/{id}/render/": {
    post: operations["notification_templates_render_create"];
  };
  "/notifications/": {
    get: operations["notifications_list"];
    post: operations["notifications_create"];
  };
  "/notifications/{id}/": {
    get: operations["notifications_retrieve"];
  };
  "/orders/": {
    get: operations["orders_list"];
    post: operations["orders_create"];
  };
  "/orders/{id}/": {
    get: operations["orders_retrieve"];
    put: operations["orders_update"];
    patch: operations["orders_partial_update"];
  };
  "/password_change/": {
    post: operations["password_change_create"];
  };
  "/password_reset/": {
    post: operations["password_reset_create"];
  };
  "/password_reset_confirm/": {
    post: operations["password_reset_confirm_create"];
  };
  "/push_notifications/": {
    get: operations["push_notifications_list"];
    post: operations["push_notifications_create"];
  };
  "/push_notifications/{id}/": {
    get: operations["push_notifications_retrieve"];
    put: operations["push_notifications_update"];
    delete: operations["push_notifications_destroy"];
    patch: operations["push_notifications_partial_update"];
  };
  "/push_notifications/{id}/resend/": {
    post: operations["push_notifications_resend_create"];
  };
  "/recurrences/": {
    get: operations["recurrences_list"];
    post: operations["recurrences_create"];
  };
  "/recurrences/{id}/": {
    get: operations["recurrences_retrieve"];
    put: operations["recurrences_update"];
    patch: operations["recurrences_partial_update"];
  };
  "/register/": {
    post: operations["register_create"];
  };
  "/route_optimizations/": {
    get: operations["route_optimizations_list"];
    post: operations["route_optimizations_create"];
  };
  "/route_optimizations/{id}/": {
    get: operations["route_optimizations_retrieve"];
  };
  "/route_optimizations/{id}/commit/": {
    post: operations["route_optimizations_commit_create"];
  };
  "/route_optimizations/{id}/results/": {
    get: operations["route_optimizations_results_retrieve"];
  };
  "/route_optimizations/{id}/routes/": {
    get: operations["route_optimizations_routes_retrieve"];
    post: operations["route_optimizations_routes_create"];
  };
  "/route_optimizations/{id}/schedule/": {
    post: operations["route_optimizations_schedule_create"];
  };
  "/routes/": {
    get: operations["routes_list"];
    post: operations["routes_create"];
  };
  "/routes/{id}/": {
    get: operations["routes_retrieve"];
    put: operations["routes_update"];
    delete: operations["routes_destroy"];
    patch: operations["routes_partial_update"];
  };
  "/scenes/dashboard/": {
    get: operations["scenes_dashboard_list"];
  };
  "/scenes/order_list/": {
    get: operations["scenes_order_list_list"];
  };
  "/scenes/recurrence_list/": {
    get: operations["scenes_recurrence_list_list"];
  };
  "/scenes/task_list/": {
    get: operations["scenes_task_list_list"];
  };
  "/signatures/": {
    get: operations["signatures_list"];
    post: operations["signatures_create"];
  };
  "/signatures/{id}/": {
    get: operations["signatures_retrieve"];
    delete: operations["signatures_destroy"];
  };
  "/sms/": {
    get: operations["sms_list"];
    post: operations["sms_create"];
  };
  "/sms/{id}/": {
    get: operations["sms_retrieve"];
    put: operations["sms_update"];
    delete: operations["sms_destroy"];
    patch: operations["sms_partial_update"];
  };
  "/sms/{id}/resend/": {
    post: operations["sms_resend_create"];
  };
  "/task_address_features/": {
    get: operations["task_address_features_list"];
  };
  "/task_address_features/{id}/": {
    get: operations["task_address_features_retrieve"];
  };
  "/task_commands/": {
    get: operations["task_commands_list"];
    post: operations["task_commands_create"];
  };
  "/task_commands/{id}/": {
    get: operations["task_commands_retrieve"];
    put: operations["task_commands_update"];
  };
  "/task_event_tracks/": {
    get: operations["task_event_tracks_list"];
  };
  "/task_event_tracks/{id}/": {
    get: operations["task_event_tracks_retrieve"];
  };
  "/task_events/": {
    /**
     * Mixin which allows the override of the filename being
     * passed back to the user when the spreadsheet is downloaded.
     */
    get: operations["task_events_list"];
  };
  "/task_events/{id}/": {
    /**
     * Mixin which allows the override of the filename being
     * passed back to the user when the spreadsheet is downloaded.
     */
    get: operations["task_events_retrieve"];
  };
  "/task_exports/": {
    get: operations["task_exports_list"];
  };
  "/task_forms/": {
    get: operations["task_forms_list"];
    post: operations["task_forms_create"];
  };
  "/task_forms/{id}/": {
    get: operations["task_forms_retrieve"];
    put: operations["task_forms_update"];
    delete: operations["task_forms_destroy"];
    patch: operations["task_forms_partial_update"];
  };
  "/task_import/": {
    get: operations["task_import_list"];
    post: operations["task_import_create"];
  };
  "/task_import/{id}/": {
    get: operations["task_import_retrieve"];
  };
  "/task_metadatas/": {
    get: operations["task_metadatas_list"];
  };
  "/task_metadatas/{id}/": {
    get: operations["task_metadatas_retrieve"];
  };
  "/tasks/": {
    get: operations["tasks_list"];
    post: operations["tasks_create"];
  };
  "/tasks/{id}/": {
    get: operations["tasks_retrieve"];
    put: operations["tasks_update"];
    patch: operations["tasks_partial_update"];
  };
  "/tasks/{id}/accept/": {
    post: operations["tasks_accept_create"];
  };
  "/tasks/{id}/account_change/": {
    post: operations["tasks_account_change_create"];
  };
  "/tasks/{id}/activate/": {
    post: operations["tasks_activate_create"];
  };
  "/tasks/{id}/assign/": {
    post: operations["tasks_assign_create"];
  };
  "/tasks/{id}/cancel/": {
    post: operations["tasks_cancel_create"];
  };
  "/tasks/{id}/complete/": {
    post: operations["tasks_complete_create"];
  };
  "/tasks/{id}/documents/": {
    get: operations["tasks_documents_retrieve"];
  };
  "/tasks/{id}/events/": {
    get: operations["tasks_events_retrieve"];
  };
  "/tasks/{id}/fail/": {
    post: operations["tasks_fail_create"];
  };
  "/tasks/{id}/reject/": {
    post: operations["tasks_reject_create"];
  };
  "/tasks/{id}/signatures/": {
    get: operations["tasks_signatures_retrieve"];
  };
  "/tasks/{id}/transit/": {
    post: operations["tasks_transit_create"];
  };
  "/tasks/{id}/unaccept/": {
    post: operations["tasks_unaccept_create"];
  };
  "/tasks/{id}/unassign/": {
    post: operations["tasks_unassign_create"];
  };
  "/tasks/reorder/": {
    post: operations["tasks_reorder_create"];
  };
  "/tasks/reposition/": {
    post: operations["tasks_reposition_create"];
  };
  "/time_location_features/": {
    get: operations["time_location_features_list"];
    post: operations["time_location_features_create"];
  };
  "/time_location_features/{id}/": {
    get: operations["time_location_features_retrieve"];
    put: operations["time_location_features_update"];
    delete: operations["time_location_features_destroy"];
    patch: operations["time_location_features_partial_update"];
  };
  "/time_locations/": {
    get: operations["time_locations_list"];
    post: operations["time_locations_create"];
  };
  "/time_locations/{id}/": {
    get: operations["time_locations_retrieve"];
  };
  "/track/{tracker_id}/location/": {
    get: operations["track_location_retrieve"];
  };
  "/trackers/": {
    get: operations["trackers_list"];
    post: operations["trackers_create"];
  };
  "/trackers/{id}/": {
    get: operations["trackers_retrieve"];
    put: operations["trackers_update"];
    patch: operations["trackers_partial_update"];
  };
  "/trackers/{id}/public/": {
    get: operations["trackers_public_retrieve"];
  };
  "/users/": {
    get: operations["users_list"];
    post: operations["users_create"];
  };
  "/users/{id}/": {
    get: operations["users_retrieve"];
    put: operations["users_update"];
    delete: operations["users_destroy"];
    patch: operations["users_partial_update"];
  };
  "/users/{id}/on_duty/": {
    get: operations["users_on_duty_retrieve"];
    put: operations["users_on_duty_update"];
    delete: operations["users_on_duty_destroy"];
  };
  "/users_on_duty_log/": {
    get: operations["users_on_duty_log_list"];
    post: operations["users_on_duty_log_create"];
  };
  "/users_on_duty_log/{id}/": {
    get: operations["users_on_duty_log_retrieve"];
  };
  "/webhooks/": {
    get: operations["webhooks_list"];
    post: operations["webhooks_create"];
  };
  "/webhooks/{id}/": {
    get: operations["webhooks_retrieve"];
    put: operations["webhooks_update"];
    delete: operations["webhooks_destroy"];
    patch: operations["webhooks_partial_update"];
  };
  "/webhooks/{id}/active/": {
    post: operations["webhooks_active_create"];
  };
  "/webhooks/{id}/inactive/": {
    post: operations["webhooks_inactive_create"];
  };
  "/worker_features/": {
    get: operations["worker_features_list"];
  };
  "/worker_features/{user_id}/": {
    get: operations["worker_features_retrieve"];
  };
  "/worker_tracks/": {
    get: operations["worker_tracks_list"];
  };
  "/working_state/": {
    get: operations["working_state_list"];
    post: operations["working_state_create"];
  };
  "/working_state/{id}/": {
    get: operations["working_state_retrieve"];
  };
}

export interface components {
  schemas: {
    Account: {
      id: string;
      url: string;
      name: string;
      type?:
        | components["schemas"]["TypeEnum"]
        | components["schemas"]["BlankEnum"];
      slug: string;
      owner: string;
      email?: string;
      website?: string;
      registry_code?: string;
      vatin?: string;
      language?: components["schemas"]["LanguageEnum"];
      timezone?: components["schemas"]["TimezoneEnum"];
      country_code?:
        | components["schemas"]["CountryCodeEnum"]
        | components["schemas"]["BlankEnum"];
      address?: components["schemas"]["NestedAddress"] | null;
      phone_prefix?: string;
      distance_units?: components["schemas"]["DistanceUnitsEnum"];
      task_duration?: { [key: string]: unknown };
      task_expiry_duration?: { [key: string]: unknown } | null;
      task_expiry_state?: components["schemas"]["TaskExpiryStateEnum"];
      assignee_proximity_radius?: number;
      optimize_after_create?: boolean;
      optimize_when_on_duty?: boolean;
      /** Specify the default objective for your optimizationions */
      optimization_objective?: components["schemas"]["OptimizationObjectiveEnum"];
      reference_autogenerate?: boolean;
      reference_offset?: number;
      reference_prefix?: string;
      reference_length?: number;
      feature_show_unassigned_to_workers?: boolean;
      feature_task_created_sound?: boolean;
      feature_change_task_account: boolean;
      feature_show_tutorial?: boolean;
      feature_navigation_app_selection?: boolean;
      feature_navigation_use_address?: boolean;
      feature_task_accept?: boolean;
      feature_task_reject?: boolean;
      feature_app_task_search?: boolean;
      feature_address_autosuggest_provider?: components["schemas"]["FeatureAddressAutosuggestProviderEnum"];
      /** Limit geocoding to the selected country. */
      feature_geocoding_country_code:
        | components["schemas"]["FeatureGeocodingCountryCodeEnum"]
        | components["schemas"]["BlankEnum"];
      /** Allow choosing documents to sign. */
      feature_document_signing?: boolean;
      auto_assign_orders?: boolean;
      /** How many tasks can be auto assigned to a worker? */
      auto_assign_max_tasks?: number | null;
      /** How far can a task be auto assigned to a worker in meters? */
      auto_assign_max_distance?: number | null;
      auto_assign_time_before?: string | null;
      /** Time after non-accepted task assignees will be rotated. Leave empty in case the orders should not be rotated */
      auto_assign_rotate?: { [key: string]: unknown } | null;
      /** Check the optimizer results before assignment? */
      auto_assign_optimize?: boolean;
      dashboard_task_template: string;
      dashboard_worker_limit: number;
      managers: string;
      workers: string;
      stripe_customer_id: string;
      /** Reflects current default payment method. For reference only. */
      stripe_payment_method_id: string;
      billing_method: components["schemas"]["AccountBillingMethodEnum"];
      billing_name?: string;
      billing_company?: string;
      billing_address?: string;
      billing_country?: string;
      billing_email?: string;
      billing_phone?: string;
      billing_vatin?: string;
    };
    AccountBillingMethodEnum:
      | "braintree"
      | "free"
      | "invoice"
      | "stripe"
      | "trial";
    AccountRole: {
      id: string;
      url: string;
      account: string;
      user?: string;
      state: components["schemas"]["AccountRoleStateEnum"];
      email: string;
      display_name?: string | null;
      phone?: string;
      vehicle_registration_number?: string;
      vehicle_profile?: components["schemas"]["VehicleProfileEnum"];
      vehicle_capacity?: number[] | null;
      vehicle_speed_factor?: string;
      vehicle_service_time_factor?: string;
      route_start_address?: string | null;
      route_end_address?: string | null;
      signature_image: string;
      is_manager?: boolean;
      is_worker?: boolean;
      is_integration?: boolean;
      is_active: string;
      is_on_duty: string;
      show_unassigned?: boolean;
      last_time_location: string;
      activated_at: string;
      deleted_at: string;
      created_at: string;
      updated_at: string;
    };
    AccountRoleStateEnum: "inactive" | "active" | "deleted";
    AccountStripePaymentMethodAttach: {
      stripe_customer_id?: string;
      /** Reflects current default payment method. For reference only. */
      stripe_payment_method_id: string;
      set_default?: boolean;
    };
    AccountStripePaymentMethodDetach: {
      /** Reflects current default payment method. For reference only. */
      stripe_payment_method_id: string;
    };
    AccountStripePaymentMethodGet: {
      payment_method_id: string;
    };
    AccountStripePaymentMethodSetDefault: {
      /** Reflects current default payment method. For reference only. */
      stripe_payment_method_id: string;
    };
    AccountStripePaymentMethods: {
      default_payment_method_id: string;
    };
    AccountStripeSetupAttemptGet: {
      setup_attempt_id: string;
    };
    AccountStripeSetupIntentCreate: {
      payment_method_id: string;
    };
    AccountStripeSetupIntentGet: {
      setup_intent_id: string;
    };
    AccountStripeSetupIntentsGet: {
      payment_method_id?: string | null;
    };
    AccountUser: {
      id: string;
      url: string;
      first_name: string;
      last_name: string;
      display_name: string;
      email: string;
      phone: string;
      is_on_duty: string;
    };
    ActionEnum:
      | "update"
      | "reassign"
      | "assign"
      | "accept"
      | "unaccept"
      | "reject"
      | "unassign"
      | "transit"
      | "activate"
      | "complete"
      | "fail"
      | "cancel"
      | "assignee_near"
      | "assignee_away";
    ActiveStatesEnum:
      | "unassigned"
      | "assigned"
      | "accepted"
      | "transit"
      | "active"
      | "completed"
      | "failed"
      | "cancelled";
    Addon: {
      id: string;
      name: string;
      short_description: string;
      description: string;
      price: string;
    };
    AssigneeProximityEnum: "away" | "near";
    AuthToken: {
      username: string;
      password: string;
      token: string;
    };
    AuthenticatedUserCreate: {
      id: string;
      url: string;
      first_name?: string;
      last_name?: string;
      display_name: string;
      email: string;
      phone?: string;
      password?: string;
      address?: components["schemas"]["NestedAddress"];
    };
    AuthenticatedUserUpdate: {
      id: string;
      url: string;
      first_name?: string;
      last_name?: string;
      display_name: string;
      email: string;
      phone?: string;
      address?: components["schemas"]["NestedAddress"];
    };
    BlankEnum: "";
    BraintreeCustomer: {
      id: string;
      url: string;
      braintree_id?: string | null;
      account: string;
      first_name?: string;
      last_name?: string;
      company?: string;
      email?: string;
      phone?: string;
      website?: string;
      vat?: string;
      payment_method_nonce?: string | null;
      created_at: string;
      updated_at: string;
    };
    BraintreeTransaction: {
      id: string;
      url: string;
      invoice: string;
      customer: string;
      type?: string;
      status?: string;
      amount: string;
      currency?: string;
      timestamp: string;
      response: string;
      created_at: string;
      updated_at: string;
    };
    CategoryEnum: "assignment" | "pick_up" | "drop_off" | "warehouse";
    Client: {
      id: string;
      url: string;
      account: string;
      name: string;
      slug: string;
      archived?: boolean;
      created_at: string;
      updated_at: string;
      contact_addresses: string;
    };
    ClientRole: {
      id: string;
      url: string;
      account: string;
      client: string;
      user: string;
      phone?: string;
      is_manager?: boolean;
      /** Designates whether this Client Role should be treated as active. */
      is_active?: boolean;
      created_at: string;
      updated_at: string;
    };
    ContactAddress: {
      id: string;
      url: string;
      external_id?: string | null;
      account: string;
      client?: string;
      contact: components["schemas"]["NestedContact"];
      address: components["schemas"]["NestedAddress"];
      is_orderer?: boolean;
      is_receiver?: boolean;
      source?: string;
      created_at: string;
      updated_at: string;
    };
    ContactAddressBackgroundImport: {
      id: string;
      url: string;
      account: string;
      created_by: string;
      contact_addresses_data: { [key: string]: unknown }[];
      state: components["schemas"]["StateE9aEnum"];
      started_at: string;
      completed_at: string;
      failed_at: string;
      errors: { [key: string]: unknown };
      celery_task_id: string;
      contact_addresses_created: string[];
      created_at: string;
      updated_at: string;
    };
    CountryCodeEnum:
      | "AW"
      | "AF"
      | "AO"
      | "AI"
      | "AX"
      | "AL"
      | "AD"
      | "AE"
      | "AR"
      | "AM"
      | "AS"
      | "AQ"
      | "TF"
      | "AG"
      | "AU"
      | "AT"
      | "AZ"
      | "BI"
      | "BE"
      | "BJ"
      | "BQ"
      | "BF"
      | "BD"
      | "BG"
      | "BH"
      | "BS"
      | "BA"
      | "BL"
      | "BY"
      | "BZ"
      | "BM"
      | "BO"
      | "BR"
      | "BB"
      | "BN"
      | "BT"
      | "BV"
      | "BW"
      | "CF"
      | "CA"
      | "CC"
      | "CH"
      | "CL"
      | "CN"
      | "CI"
      | "CM"
      | "CD"
      | "CG"
      | "CK"
      | "CO"
      | "KM"
      | "CV"
      | "CR"
      | "CU"
      | "CW"
      | "CX"
      | "KY"
      | "CY"
      | "CZ"
      | "DE"
      | "DJ"
      | "DM"
      | "DK"
      | "DO"
      | "DZ"
      | "EC"
      | "EG"
      | "ER"
      | "EH"
      | "ES"
      | "EE"
      | "ET"
      | "FI"
      | "FJ"
      | "FK"
      | "FR"
      | "FO"
      | "FM"
      | "GA"
      | "GB"
      | "GE"
      | "GG"
      | "GH"
      | "GI"
      | "GN"
      | "GP"
      | "GM"
      | "GW"
      | "GQ"
      | "GR"
      | "GD"
      | "GL"
      | "GT"
      | "GF"
      | "GU"
      | "GY"
      | "HK"
      | "HM"
      | "HN"
      | "HR"
      | "HT"
      | "HU"
      | "ID"
      | "IM"
      | "IN"
      | "IO"
      | "IE"
      | "IR"
      | "IQ"
      | "IS"
      | "IL"
      | "IT"
      | "JM"
      | "JE"
      | "JO"
      | "JP"
      | "KZ"
      | "KE"
      | "KG"
      | "KH"
      | "KI"
      | "KN"
      | "KR"
      | "KW"
      | "LA"
      | "LB"
      | "LR"
      | "LY"
      | "LC"
      | "LI"
      | "LK"
      | "LS"
      | "LT"
      | "LU"
      | "LV"
      | "MO"
      | "MF"
      | "MA"
      | "MC"
      | "MD"
      | "MG"
      | "MV"
      | "MX"
      | "MH"
      | "MK"
      | "ML"
      | "MT"
      | "MM"
      | "ME"
      | "MN"
      | "MP"
      | "MZ"
      | "MR"
      | "MS"
      | "MQ"
      | "MU"
      | "MW"
      | "MY"
      | "YT"
      | "NA"
      | "NC"
      | "NE"
      | "NF"
      | "NG"
      | "NI"
      | "NU"
      | "NL"
      | "NO"
      | "NP"
      | "NR"
      | "NZ"
      | "OM"
      | "PK"
      | "PA"
      | "PN"
      | "PE"
      | "PH"
      | "PW"
      | "PG"
      | "PL"
      | "PR"
      | "KP"
      | "PT"
      | "PY"
      | "PS"
      | "PF"
      | "QA"
      | "RE"
      | "RO"
      | "RU"
      | "RW"
      | "SA"
      | "SD"
      | "SN"
      | "SG"
      | "GS"
      | "SH"
      | "SJ"
      | "SB"
      | "SL"
      | "SV"
      | "SM"
      | "SO"
      | "PM"
      | "RS"
      | "SS"
      | "ST"
      | "SR"
      | "SK"
      | "SI"
      | "SE"
      | "SZ"
      | "SX"
      | "SC"
      | "SY"
      | "TC"
      | "TD"
      | "TG"
      | "TH"
      | "TJ"
      | "TK"
      | "TM"
      | "TL"
      | "TO"
      | "TT"
      | "TN"
      | "TR"
      | "TV"
      | "TW"
      | "TZ"
      | "UG"
      | "UA"
      | "UM"
      | "UY"
      | "US"
      | "UZ"
      | "VA"
      | "VC"
      | "VE"
      | "VG"
      | "VI"
      | "VN"
      | "VU"
      | "WF"
      | "WS"
      | "YE"
      | "ZA"
      | "ZM"
      | "ZW";
    DashboardScene: {
      orders: components["schemas"]["Order"][];
      tasks: components["schemas"]["LegacyTask"][];
      task_metadatas: components["schemas"]["TaskMetadata"][];
      assigned_task_counts: { [key: string]: unknown };
      workers: components["schemas"]["AccountUser"][];
      worker_features: components["schemas"]["WorkerFeature"][];
      updated_at: string;
    };
    Device: {
      id: string;
      url: string;
      user: string;
      brand?: string | null;
      build_number?: string | null;
      device_country?: string | null;
      device_id?: string | null;
      device_locale?: string | null;
      free_disk_storage?: number | null;
      manufacturer?: string | null;
      model?: string | null;
      readable_version?: string | null;
      system_name?: string | null;
      system_version?: string | null;
      timezone?:
        | components["schemas"]["TimezoneEnum"]
        | components["schemas"]["BlankEnum"];
      version?: string | null;
      location_permission?: string | null;
      notification_permission?: string | null;
      motion_permission?: string | null;
      ios_app_tracking_permission?: string | null;
      battery_level?: number | null;
      is_charging?: boolean | null;
      created_at: string;
    };
    DistanceUnitsEnum: "kilometers" | "miles";
    Document: {
      id: string;
      url: string;
      account?: string;
      external_id?: string | null;
      order?: string | null;
      task?: string | null;
      file_upload?: string | null;
      file: string;
      file_name: string;
      description?: string;
      created_by: string;
      visible_to_worker?: boolean;
      visible_to_client?: boolean;
      created_at: string;
      updated_at: string;
    };
    Email: {
      id: string;
      url: string;
      account: string;
      external_id?: string;
      state: components["schemas"]["StateA81Enum"];
      notification: string;
      sender: string;
      from_email?: string;
      reply_to_email?: string;
      to_emails?: string[];
      subject: string;
      message: string;
      sent_at: string;
      failed_at: string;
      received_at: string;
      created_at: string;
    };
    EventEnum:
      | "create"
      | "assign"
      | "unassign"
      | "reject"
      | "accept"
      | "unaccept"
      | "transit"
      | "activate"
      | "complete"
      | "fail"
      | "cancel"
      | "assignee_near"
      | "assignee_away"
      | "updated";
    Export: {
      id: string;
      url: string;
      account: string;
      export_model: components["schemas"]["ExportModelEnum"];
      field_names?: string[] | null;
      format: components["schemas"]["FormatEnum"];
      link: string;
      created_at: string;
      updated_at: string;
    };
    ExportModelEnum: "tasks";
    FeatureAddressAutosuggestProviderEnum:
      | "google"
      | "heremaps"
      | "regio"
      | "janaseta";
    FeatureGeocodingCountryCodeEnum:
      | "AW"
      | "AF"
      | "AO"
      | "AI"
      | "AX"
      | "AL"
      | "AD"
      | "AE"
      | "AR"
      | "AM"
      | "AS"
      | "AQ"
      | "TF"
      | "AG"
      | "AU"
      | "AT"
      | "AZ"
      | "BI"
      | "BE"
      | "BJ"
      | "BQ"
      | "BF"
      | "BD"
      | "BG"
      | "BH"
      | "BS"
      | "BA"
      | "BL"
      | "BY"
      | "BZ"
      | "BM"
      | "BO"
      | "BR"
      | "BB"
      | "BN"
      | "BT"
      | "BV"
      | "BW"
      | "CF"
      | "CA"
      | "CC"
      | "CH"
      | "CL"
      | "CN"
      | "CI"
      | "CM"
      | "CD"
      | "CG"
      | "CK"
      | "CO"
      | "KM"
      | "CV"
      | "CR"
      | "CU"
      | "CW"
      | "CX"
      | "KY"
      | "CY"
      | "CZ"
      | "DE"
      | "DJ"
      | "DM"
      | "DK"
      | "DO"
      | "DZ"
      | "EC"
      | "EG"
      | "ER"
      | "EH"
      | "ES"
      | "EE"
      | "ET"
      | "FI"
      | "FJ"
      | "FK"
      | "FR"
      | "FO"
      | "FM"
      | "GA"
      | "GB"
      | "GE"
      | "GG"
      | "GH"
      | "GI"
      | "GN"
      | "GP"
      | "GM"
      | "GW"
      | "GQ"
      | "GR"
      | "GD"
      | "GL"
      | "GT"
      | "GF"
      | "GU"
      | "GY"
      | "HK"
      | "HM"
      | "HN"
      | "HR"
      | "HT"
      | "HU"
      | "ID"
      | "IM"
      | "IN"
      | "IO"
      | "IE"
      | "IR"
      | "IQ"
      | "IS"
      | "IL"
      | "IT"
      | "JM"
      | "JE"
      | "JO"
      | "JP"
      | "KZ"
      | "KE"
      | "KG"
      | "KH"
      | "KI"
      | "KN"
      | "KR"
      | "KW"
      | "LA"
      | "LB"
      | "LR"
      | "LY"
      | "LC"
      | "LI"
      | "LK"
      | "LS"
      | "LT"
      | "LU"
      | "LV"
      | "MO"
      | "MF"
      | "MA"
      | "MC"
      | "MD"
      | "MG"
      | "MV"
      | "MX"
      | "MH"
      | "MK"
      | "ML"
      | "MT"
      | "MM"
      | "ME"
      | "MN"
      | "MP"
      | "MZ"
      | "MR"
      | "MS"
      | "MQ"
      | "MU"
      | "MW"
      | "MY"
      | "YT"
      | "NA"
      | "NC"
      | "NE"
      | "NF"
      | "NG"
      | "NI"
      | "NU"
      | "NL"
      | "NO"
      | "NP"
      | "NR"
      | "NZ"
      | "OM"
      | "PK"
      | "PA"
      | "PN"
      | "PE"
      | "PH"
      | "PW"
      | "PG"
      | "PL"
      | "PR"
      | "KP"
      | "PT"
      | "PY"
      | "PS"
      | "PF"
      | "QA"
      | "RE"
      | "RO"
      | "RU"
      | "RW"
      | "SA"
      | "SD"
      | "SN"
      | "SG"
      | "GS"
      | "SH"
      | "SJ"
      | "SB"
      | "SL"
      | "SV"
      | "SM"
      | "SO"
      | "PM"
      | "RS"
      | "SS"
      | "ST"
      | "SR"
      | "SK"
      | "SI"
      | "SE"
      | "SZ"
      | "SX"
      | "SC"
      | "SY"
      | "TC"
      | "TD"
      | "TG"
      | "TH"
      | "TJ"
      | "TK"
      | "TM"
      | "TL"
      | "TO"
      | "TT"
      | "TN"
      | "TR"
      | "TV"
      | "TW"
      | "TZ"
      | "UG"
      | "UA"
      | "UM"
      | "UY"
      | "US"
      | "UZ"
      | "VA"
      | "VC"
      | "VE"
      | "VG"
      | "VI"
      | "VN"
      | "VU"
      | "WF"
      | "WS"
      | "YE"
      | "ZA"
      | "ZM"
      | "ZW";
    FieldEnum: "state" | "assignee_proximity" | "metafields";
    FormRule: {
      id: string;
      url: string;
      account: string;
      is_active?: boolean;
      name: string;
      edit_url: string;
      view_url?: string | null;
      pdf_url?: string | null;
      rules: { [key: string]: unknown };
    };
    FormatEnum: "json" | "xlsx";
    FromStateEnum:
      | "unassigned"
      | "assigned"
      | "accepted"
      | "transit"
      | "active"
      | "completed"
      | "failed"
      | "cancelled"
      | "away"
      | "near";
    IntegrationRequest: {
      id: string;
      account: string;
      name: string;
      notes?: string;
      user: string;
    };
    Invoice: {
      id: string;
      url: string;
      account: components["schemas"]["InvoiceAccount"];
      billing_method: components["schemas"]["InvoiceBillingMethodEnum"];
      state: components["schemas"]["InvoiceStateEnum"];
      /** Indicates what period the price was calculated for */
      period: string[];
      total_no_vat: string;
      total_vat: string;
      total_with_vat: string;
      currency: string;
      vat: boolean;
      due_date?: string | null;
      paid_at: string;
      items: components["schemas"]["InvoiceItem"][];
      pricing: string;
      confirmed_by: string;
      confirmed_at: string;
      created_at: string;
      updated_at: string;
    };
    InvoiceAccount: {
      id: string;
      slug: string;
      name: string;
      registry_code?: string;
      vatin?: string;
      billing_reference?: string;
      billing_email?: string;
      billing_vat?: boolean;
    };
    InvoiceBillingMethodEnum: "braintree" | "invoice" | "stripe";
    InvoiceItem: {
      id: string;
      invoice: string;
      name: string;
      unit_price: string;
      quantity: string;
      unit?: string;
      total: string;
      created_at: string;
      updated_at: string;
    };
    InvoiceStateEnum: "draft" | "confirmed" | "overdue" | "paid" | "cancelled";
    LanguageEnum:
      | "af"
      | "ar"
      | "ar-dz"
      | "ast"
      | "az"
      | "bg"
      | "be"
      | "bn"
      | "br"
      | "bs"
      | "ca"
      | "cs"
      | "cy"
      | "da"
      | "de"
      | "dsb"
      | "el"
      | "en"
      | "en-au"
      | "en-gb"
      | "eo"
      | "es"
      | "es-ar"
      | "es-co"
      | "es-mx"
      | "es-ni"
      | "es-ve"
      | "et"
      | "eu"
      | "fa"
      | "fi"
      | "fr"
      | "fy"
      | "ga"
      | "gd"
      | "gl"
      | "he"
      | "hi"
      | "hr"
      | "hsb"
      | "hu"
      | "hy"
      | "ia"
      | "id"
      | "ig"
      | "io"
      | "is"
      | "it"
      | "ja"
      | "ka"
      | "kab"
      | "kk"
      | "km"
      | "kn"
      | "ko"
      | "ky"
      | "lb"
      | "lt"
      | "lv"
      | "mk"
      | "ml"
      | "mn"
      | "mr"
      | "my"
      | "nb"
      | "ne"
      | "nl"
      | "nn"
      | "os"
      | "pa"
      | "pl"
      | "pt"
      | "pt-br"
      | "ro"
      | "ru"
      | "sk"
      | "sl"
      | "sq"
      | "sr"
      | "sr-latn"
      | "sv"
      | "sw"
      | "ta"
      | "te"
      | "tg"
      | "th"
      | "tk"
      | "tr"
      | "tt"
      | "udm"
      | "uk"
      | "ur"
      | "uz"
      | "vi"
      | "zh-hans"
      | "zh-hant";
    /**
     * Support depreciated fields phone and email
     *
     * write to new fields phones[0] and emails[0]
     */
    LegacyNestedContact: {
      name?: string;
      company?: string;
      phone?: string | null;
      email?: string | null;
      phones?: string[];
      emails?: string[];
      notes?: string;
    };
    LegacyTask: {
      id?: string | null;
      url: string;
      account: string;
      order?: string | null;
      route?: string | null;
      order_reference: string;
      external_id?: string | null;
      category?: components["schemas"]["CategoryEnum"];
      orderer?: string | null;
      orderer_name: string;
      receiver?: string | null;
      contact?: components["schemas"]["LegacyNestedContact"];
      address: components["schemas"]["NestedAddress"];
      description?: string;
      reference?: string;
      complete_after?: string | null;
      complete_before?: string | null;
      scheduled_time?: string | null;
      state: components["schemas"]["StateEf4Enum"];
      completed_at: string;
      cancelled_at: string;
      assignee?: string | null;
      auto_assign?: boolean;
      assignee_proximity: components["schemas"]["AssigneeProximityEnum"];
      position?: string | null;
      priority?: number;
      duration?: { [key: string]: unknown } | null;
      size?: number[] | null;
      is_full_load?: boolean;
      metafields?: { [key: string]: unknown };
      forms?: { [key: string]: unknown };
      created_by: string;
      issues: string;
      created_at: string;
      updated_at: string;
      events: string;
      documents: string;
      signatures: string;
      actions: string;
      counts: string;
    };
    Metafield: {
      id: string;
      url: string;
      account: string;
      ordering?: number;
      namespace?: string;
      key: string;
      field_name: string;
      value_type?: components["schemas"]["ValueTypeEnum"];
      label?: string;
      choices?: string[] | null;
      choices_url?: string | null;
      is_editable?: boolean;
      is_editable_assignee?: boolean;
      is_required?: boolean;
      /** Metadata, that will be copied to on recurrence. */
      is_persistent?: boolean;
      is_searchable?: boolean;
      show_in_list_view?: boolean;
      show_in_detail_view?: boolean;
      show_in_mobile_app?: boolean;
      show_in_pod?: boolean;
      show_when_task_type_assignment?: boolean;
      show_when_task_type_pick_up?: boolean;
      show_when_task_type_drop_off?: boolean;
      created_at: string;
      updated_at: string;
    };
    ModeEnum: "online" | "offline";
    NestedAddress: {
      raw_address?: string;
      formatted_address?: string;
      location?: { [key: string]: unknown } | null;
      google_place_id?: string;
      point_of_interest?: string;
      street?: string;
      house_number?: string;
      apartment_number?: string | null;
      city?: string;
      state?: string;
      postal_code?: string;
      country?: string;
      country_code?: string;
    };
    NestedContact: {
      name?: string;
      company?: string;
      phones?: string[];
      emails?: string[];
      notes?: string;
    };
    Notification: {
      id: string;
      url: string;
      method: string;
      task: string;
      template?: string | null;
      event?:
        | (
            | components["schemas"]["EventEnum"]
            | components["schemas"]["BlankEnum"]
            | components["schemas"]["NullEnum"]
          )
        | null;
      state?:
        | (
            | components["schemas"]["StateEf4Enum"]
            | components["schemas"]["BlankEnum"]
            | components["schemas"]["NullEnum"]
          )
        | null;
      assignee_proximity?:
        | (
            | components["schemas"]["AssigneeProximityEnum"]
            | components["schemas"]["BlankEnum"]
            | components["schemas"]["NullEnum"]
          )
        | null;
      recipient?:
        | (
            | components["schemas"]["RecipientEnum"]
            | components["schemas"]["BlankEnum"]
            | components["schemas"]["NullEnum"]
          )
        | null;
      emails?: string[] | null;
      phones?: string[];
      message?: string;
      add_tracking_link?: boolean;
      sms_count: number;
      sent_at?: string | null;
      via_app: boolean;
      via_email: boolean;
      via_sms: boolean;
      created_at: string;
      updated_at: string;
    };
    NotificationTemplate: {
      id: string;
      url: string;
      account: string;
      name: string;
      event?:
        | components["schemas"]["EventEnum"]
        | components["schemas"]["BlankEnum"];
      state?:
        | components["schemas"]["StateEf4Enum"]
        | components["schemas"]["BlankEnum"];
      task_category?:
        | (
            | components["schemas"]["TaskCategoryEnum"]
            | components["schemas"]["BlankEnum"]
            | components["schemas"]["NullEnum"]
          )
        | null;
      scheduled_time_change?: boolean;
      recipient?:
        | (
            | components["schemas"]["RecipientEnum"]
            | components["schemas"]["BlankEnum"]
            | components["schemas"]["NullEnum"]
          )
        | null;
      via_sms?: boolean;
      via_email?: boolean;
      via_app?: boolean;
      is_active?: boolean;
      message: string;
      created_at: string;
      updated_at: string;
    };
    NullEnum: null;
    ObjectiveEnum: "vehicles" | "transport_time" | "completion_time";
    OnDuty: {
      account: string;
    };
    OptimizationObjectiveEnum:
      | "vehicles"
      | "transport_time"
      | "completion_time";
    Order: {
      id?: string | null;
      url: string;
      account: string;
      external_id?: string | null;
      reference?: string;
      client?: string | null;
      tasks: string[];
      auto_assign?: boolean;
      created_by: string;
      created_at: string;
      updated_at: string;
    };
    OrderListScene: {
      clients: components["schemas"]["Client"][];
      orders: components["schemas"]["Order"][];
      tasks: components["schemas"]["LegacyTask"][];
      assignees: components["schemas"]["PublicUser"][];
    };
    OrderSerializerV2: {
      id?: string | null;
      url: string;
      account: string;
      external_id?: string | null;
      reference?: string;
      client?: string;
      orderer?: components["schemas"]["NestedContact"];
      tasks?: string[];
      tasks_data?: components["schemas"]["TaskSerializerV2"][];
      assignee?: string;
      auto_assign?: boolean;
      created_by: string;
      created_at: string;
      updated_at: string;
    };
    PaginatedAccountList: components["schemas"]["Account"][];
    PaginatedAccountRoleList: components["schemas"]["AccountRole"][];
    PaginatedAddonList: components["schemas"]["Addon"][];
    PaginatedBraintreeCustomerList: components["schemas"]["BraintreeCustomer"][];
    PaginatedBraintreeTransactionList: components["schemas"]["BraintreeTransaction"][];
    PaginatedClientList: components["schemas"]["Client"][];
    PaginatedClientRoleList: components["schemas"]["ClientRole"][];
    PaginatedContactAddressBackgroundImportList: components["schemas"]["ContactAddressBackgroundImport"][];
    PaginatedContactAddressList: components["schemas"]["ContactAddress"][];
    PaginatedDashboardSceneList: components["schemas"]["DashboardScene"][];
    PaginatedDeviceList: components["schemas"]["Device"][];
    PaginatedDocumentList: components["schemas"]["Document"][];
    PaginatedEmailList: components["schemas"]["Email"][];
    PaginatedExportList: components["schemas"]["Export"][];
    PaginatedFormRuleList: components["schemas"]["FormRule"][];
    PaginatedInvoiceList: components["schemas"]["Invoice"][];
    PaginatedMetafieldList: components["schemas"]["Metafield"][];
    PaginatedNotificationList: components["schemas"]["Notification"][];
    PaginatedNotificationTemplateList: components["schemas"]["NotificationTemplate"][];
    PaginatedOrderListSceneList: components["schemas"]["OrderListScene"][];
    PaginatedOrderSerializerV2List: components["schemas"]["OrderSerializerV2"][];
    PaginatedPushNotificationList: components["schemas"]["PushNotification"][];
    PaginatedRecurrenceList: components["schemas"]["Recurrence"][];
    PaginatedRecurrenceListSceneList: components["schemas"]["RecurrenceListScene"][];
    PaginatedRouteList: components["schemas"]["Route"][];
    PaginatedRouteOptimizationSerializerV2List: components["schemas"]["RouteOptimizationSerializerV2"][];
    PaginatedS3FileUploadList: components["schemas"]["S3FileUpload"][];
    PaginatedSMSList: components["schemas"]["SMS"][];
    PaginatedSignatureList: components["schemas"]["Signature"][];
    PaginatedStripePaymentList: components["schemas"]["StripePayment"][];
    PaginatedTaskAddressFeatureList: components["schemas"]["TaskAddressFeature"][];
    PaginatedTaskCommandList: components["schemas"]["TaskCommand"][];
    PaginatedTaskEventSerializerV2List: components["schemas"]["TaskEventSerializerV2"][];
    PaginatedTaskEventTrackList: components["schemas"]["TaskEventTrack"][];
    PaginatedTaskExportList: components["schemas"]["TaskExport"][];
    PaginatedTaskFormList: components["schemas"]["TaskForm"][];
    PaginatedTaskListSceneList: components["schemas"]["TaskListScene"][];
    PaginatedTaskMetadataList: components["schemas"]["TaskMetadata"][];
    PaginatedTaskSerializerV2List: components["schemas"]["TaskSerializerV2"][];
    PaginatedTasksBackgroundImportList: components["schemas"]["TasksBackgroundImport"][];
    PaginatedTimeLocationFeatureList: components["schemas"]["TimeLocationFeature"][];
    PaginatedTimeLocationList: components["schemas"]["TimeLocation"][];
    PaginatedTrackerList: components["schemas"]["Tracker"][];
    PaginatedUserList: components["schemas"]["User"][];
    PaginatedWebhookList: components["schemas"]["Webhook"][];
    PaginatedWorkerFeatureList: components["schemas"]["WorkerFeature"][];
    PaginatedWorkingStateList: components["schemas"]["WorkingState"][];
    PasswordChange: {
      old_password: string;
      new_password1: string;
      new_password2: string;
    };
    PasswordReset: {
      email: string;
    };
    PasswordResetConfirm: {
      uidb64: string;
      token: string;
      new_password1: string;
      new_password2: string;
    };
    PatchedAccount: {
      id?: string;
      url?: string;
      name?: string;
      type?:
        | components["schemas"]["TypeEnum"]
        | components["schemas"]["BlankEnum"];
      slug?: string;
      owner?: string;
      email?: string;
      website?: string;
      registry_code?: string;
      vatin?: string;
      language?: components["schemas"]["LanguageEnum"];
      timezone?: components["schemas"]["TimezoneEnum"];
      country_code?:
        | components["schemas"]["CountryCodeEnum"]
        | components["schemas"]["BlankEnum"];
      address?: components["schemas"]["NestedAddress"] | null;
      phone_prefix?: string;
      distance_units?: components["schemas"]["DistanceUnitsEnum"];
      task_duration?: { [key: string]: unknown };
      task_expiry_duration?: { [key: string]: unknown } | null;
      task_expiry_state?: components["schemas"]["TaskExpiryStateEnum"];
      assignee_proximity_radius?: number;
      optimize_after_create?: boolean;
      optimize_when_on_duty?: boolean;
      /** Specify the default objective for your optimizationions */
      optimization_objective?: components["schemas"]["OptimizationObjectiveEnum"];
      reference_autogenerate?: boolean;
      reference_offset?: number;
      reference_prefix?: string;
      reference_length?: number;
      feature_show_unassigned_to_workers?: boolean;
      feature_task_created_sound?: boolean;
      feature_change_task_account?: boolean;
      feature_show_tutorial?: boolean;
      feature_navigation_app_selection?: boolean;
      feature_navigation_use_address?: boolean;
      feature_task_accept?: boolean;
      feature_task_reject?: boolean;
      feature_app_task_search?: boolean;
      feature_address_autosuggest_provider?: components["schemas"]["FeatureAddressAutosuggestProviderEnum"];
      /** Limit geocoding to the selected country. */
      feature_geocoding_country_code?:
        | components["schemas"]["FeatureGeocodingCountryCodeEnum"]
        | components["schemas"]["BlankEnum"];
      /** Allow choosing documents to sign. */
      feature_document_signing?: boolean;
      auto_assign_orders?: boolean;
      /** How many tasks can be auto assigned to a worker? */
      auto_assign_max_tasks?: number | null;
      /** How far can a task be auto assigned to a worker in meters? */
      auto_assign_max_distance?: number | null;
      auto_assign_time_before?: string | null;
      /** Time after non-accepted task assignees will be rotated. Leave empty in case the orders should not be rotated */
      auto_assign_rotate?: { [key: string]: unknown } | null;
      /** Check the optimizer results before assignment? */
      auto_assign_optimize?: boolean;
      dashboard_task_template?: string;
      dashboard_worker_limit?: number;
      managers?: string;
      workers?: string;
      stripe_customer_id?: string;
      /** Reflects current default payment method. For reference only. */
      stripe_payment_method_id?: string;
      billing_method?: components["schemas"]["AccountBillingMethodEnum"];
      billing_name?: string;
      billing_company?: string;
      billing_address?: string;
      billing_country?: string;
      billing_email?: string;
      billing_phone?: string;
      billing_vatin?: string;
    };
    PatchedAccountRole: {
      id?: string;
      url?: string;
      account?: string;
      user?: string;
      state?: components["schemas"]["AccountRoleStateEnum"];
      email?: string;
      display_name?: string | null;
      phone?: string;
      vehicle_registration_number?: string;
      vehicle_profile?: components["schemas"]["VehicleProfileEnum"];
      vehicle_capacity?: number[] | null;
      vehicle_speed_factor?: string;
      vehicle_service_time_factor?: string;
      route_start_address?: string | null;
      route_end_address?: string | null;
      signature_image?: string;
      is_manager?: boolean;
      is_worker?: boolean;
      is_integration?: boolean;
      is_active?: string;
      is_on_duty?: string;
      show_unassigned?: boolean;
      last_time_location?: string;
      activated_at?: string;
      deleted_at?: string;
      created_at?: string;
      updated_at?: string;
    };
    PatchedBraintreeCustomer: {
      id?: string;
      url?: string;
      braintree_id?: string | null;
      account?: string;
      first_name?: string;
      last_name?: string;
      company?: string;
      email?: string;
      phone?: string;
      website?: string;
      vat?: string;
      payment_method_nonce?: string | null;
      created_at?: string;
      updated_at?: string;
    };
    PatchedClient: {
      id?: string;
      url?: string;
      account?: string;
      name?: string;
      slug?: string;
      archived?: boolean;
      created_at?: string;
      updated_at?: string;
      contact_addresses?: string;
    };
    PatchedClientRole: {
      id?: string;
      url?: string;
      account?: string;
      client?: string;
      user?: string;
      phone?: string;
      is_manager?: boolean;
      /** Designates whether this Client Role should be treated as active. */
      is_active?: boolean;
      created_at?: string;
      updated_at?: string;
    };
    PatchedContactAddress: {
      id?: string;
      url?: string;
      external_id?: string | null;
      account?: string;
      client?: string;
      contact?: components["schemas"]["NestedContact"];
      address?: components["schemas"]["NestedAddress"];
      is_orderer?: boolean;
      is_receiver?: boolean;
      source?: string;
      created_at?: string;
      updated_at?: string;
    };
    PatchedEmail: {
      id?: string;
      url?: string;
      account?: string;
      external_id?: string;
      state?: components["schemas"]["StateA81Enum"];
      notification?: string;
      sender?: string;
      from_email?: string;
      reply_to_email?: string;
      to_emails?: string[];
      subject?: string;
      message?: string;
      sent_at?: string;
      failed_at?: string;
      received_at?: string;
      created_at?: string;
    };
    PatchedExport: {
      id?: string;
      url?: string;
      account?: string;
      export_model?: components["schemas"]["ExportModelEnum"];
      field_names?: string[] | null;
      format?: components["schemas"]["FormatEnum"];
      link?: string;
      created_at?: string;
      updated_at?: string;
    };
    PatchedFormRule: {
      id?: string;
      url?: string;
      account?: string;
      is_active?: boolean;
      name?: string;
      edit_url?: string;
      view_url?: string | null;
      pdf_url?: string | null;
      rules?: { [key: string]: unknown };
    };
    PatchedInvoice: {
      id?: string;
      url?: string;
      account?: components["schemas"]["InvoiceAccount"];
      billing_method?: components["schemas"]["InvoiceBillingMethodEnum"];
      state?: components["schemas"]["InvoiceStateEnum"];
      /** Indicates what period the price was calculated for */
      period?: string[];
      total_no_vat?: string;
      total_vat?: string;
      total_with_vat?: string;
      currency?: string;
      vat?: boolean;
      due_date?: string | null;
      paid_at?: string;
      items?: components["schemas"]["InvoiceItem"][];
      pricing?: string;
      confirmed_by?: string;
      confirmed_at?: string;
      created_at?: string;
      updated_at?: string;
    };
    PatchedMetafield: {
      id?: string;
      url?: string;
      account?: string;
      ordering?: number;
      namespace?: string;
      key?: string;
      field_name?: string;
      value_type?: components["schemas"]["ValueTypeEnum"];
      label?: string;
      choices?: string[] | null;
      choices_url?: string | null;
      is_editable?: boolean;
      is_editable_assignee?: boolean;
      is_required?: boolean;
      /** Metadata, that will be copied to on recurrence. */
      is_persistent?: boolean;
      is_searchable?: boolean;
      show_in_list_view?: boolean;
      show_in_detail_view?: boolean;
      show_in_mobile_app?: boolean;
      show_in_pod?: boolean;
      show_when_task_type_assignment?: boolean;
      show_when_task_type_pick_up?: boolean;
      show_when_task_type_drop_off?: boolean;
      created_at?: string;
      updated_at?: string;
    };
    PatchedNotificationTemplate: {
      id?: string;
      url?: string;
      account?: string;
      name?: string;
      event?:
        | components["schemas"]["EventEnum"]
        | components["schemas"]["BlankEnum"];
      state?:
        | components["schemas"]["StateEf4Enum"]
        | components["schemas"]["BlankEnum"];
      task_category?:
        | (
            | components["schemas"]["TaskCategoryEnum"]
            | components["schemas"]["BlankEnum"]
            | components["schemas"]["NullEnum"]
          )
        | null;
      scheduled_time_change?: boolean;
      recipient?:
        | (
            | components["schemas"]["RecipientEnum"]
            | components["schemas"]["BlankEnum"]
            | components["schemas"]["NullEnum"]
          )
        | null;
      via_sms?: boolean;
      via_email?: boolean;
      via_app?: boolean;
      is_active?: boolean;
      message?: string;
      created_at?: string;
      updated_at?: string;
    };
    PatchedOrderSerializerV2: {
      id?: string | null;
      url?: string;
      account?: string;
      external_id?: string | null;
      reference?: string;
      client?: string;
      orderer?: components["schemas"]["NestedContact"];
      tasks?: string[];
      tasks_data?: components["schemas"]["TaskSerializerV2"][];
      assignee?: string;
      auto_assign?: boolean;
      created_by?: string;
      created_at?: string;
      updated_at?: string;
    };
    PatchedPushNotification: {
      id?: string;
      url?: string;
      account?: string;
      external_id?: string | null;
      state?: components["schemas"]["PushNotificationStateEnum"];
      notification?: string;
      recipient?: string;
      task?: string;
      event?:
        | (
            | components["schemas"]["EventEnum"]
            | components["schemas"]["BlankEnum"]
            | components["schemas"]["NullEnum"]
          )
        | null;
      subject?: string;
      message?: string;
      error?: string | null;
      pending_at?: string;
      failed_at?: string;
      sent_at?: string;
      created_at?: string;
    };
    PatchedRecurrence: {
      id?: string;
      url?: string;
      account?: string;
      order?: string;
      assign_worker?: boolean;
      is_active?: boolean;
      rrule?: string;
      timezone?: components["schemas"]["TimezoneEnum"];
      last_recurred_at?: string;
      last_scheduled_at?: string;
      next_scheduled_at?: string;
      tasks_data?: { [key: string]: unknown };
      created_at?: string;
      updated_at?: string;
    };
    PatchedRoute: {
      id?: string;
      url?: string;
      external_id?: string | null;
      account?: string;
      code?: string;
      description?: string;
      assignee?: string;
      start_time?: string | null;
      start_location?: string | null;
      end_time?: string | null;
      end_location?: string | null;
      created_at?: string;
      updated_at?: string;
    };
    PatchedSMS: {
      id?: string;
      url?: string;
      account?: string;
      external_id?: string;
      state?: components["schemas"]["StateA81Enum"];
      notification?: string;
      sender?: string;
      alphanumeric_sender_id?: string;
      phone?: string;
      message?: string | null;
      segments_count?: number;
      error?: string | null;
      sent_at?: string;
      failed_at?: string;
      received_at?: string;
      created_at?: string;
    };
    PatchedTaskForm: {
      id?: string;
      url?: string;
      task?: string;
      name?: string;
      link?: string;
      edit_url?: string;
      view_url?: string;
      pdf_url?: string;
      completed?: boolean;
      created_at?: string;
      updated_at?: string;
    };
    PatchedTaskSerializerV2: {
      id?: string | null;
      external_id?: string | null;
      reference?: string;
      url?: string;
      account?: string;
      state?: components["schemas"]["StateEf4Enum"];
      assignee?: string | null;
      order?: string | null;
      orderer_name?: string;
      route?: string | null;
      category?: components["schemas"]["CategoryEnum"];
      contact?: components["schemas"]["NestedContact"];
      address?: components["schemas"]["NestedAddress"];
      description?: string;
      complete_after?: string | null;
      complete_before?: string | null;
      scheduled_time?: string | null;
      completed_at?: string;
      cancelled_at?: string;
      auto_assign?: boolean;
      assignee_proximity?: components["schemas"]["AssigneeProximityEnum"];
      position?: number;
      priority?: number;
      duration?: { [key: string]: unknown } | null;
      size?: number[] | null;
      documents?: string[];
      signatures?: string[];
      metafields?: { [key: string]: unknown };
      issues?: string;
      counts?: string;
      actions?: string;
      created_at?: string;
      updated_at?: string;
    };
    /**
     * A subclass of ModelSerializer
     * that outputs geojson-ready data as
     * features and feature collections
     */
    PatchedTimeLocationFeature: {
      model?: string;
      id?: string;
      source?: string;
      user?: string;
      time?: string;
      state?: components["schemas"]["State29fEnum"];
      heading?: number | null;
      speed?: number | null;
      altitude?: number | null;
      accuracy?: number | null;
      battery_level?: string | null;
      created_at?: string;
      updated_at?: string;
      location?: string;
    };
    PatchedTracker: {
      id?: string;
      url?: string;
      account?: string;
      tasks?: string[];
      active_from?: string | null;
      active_until?: string | null;
      active_states?: components["schemas"]["ActiveStatesEnum"][];
      show_driver_info?: boolean;
      show_destination?: boolean;
      show_eta?: boolean;
      show_sms_action?: boolean;
      show_call_action?: boolean;
      show_logo?: boolean;
      show_path?: boolean;
      autozoom?: boolean;
      max_zoom_level?: number | null;
      tracking_page_url?: string;
    };
    PatchedWebhook: {
      id?: string;
      url?: string;
      account?: string;
      name?: string;
      version?: components["schemas"]["VersionEnum"];
      state?: components["schemas"]["WebhookStateEnum"];
      headers?: { [key: string]: unknown };
      target?: string;
      task_events?: boolean;
      document_events?: boolean;
      signature_events?: boolean;
      notification_emails?: string[];
      failure_count?: number;
      disable_message?: string;
      activated_at?: string;
      disabled_at?: string;
      created_at?: string;
      updated_at?: string;
    };
    PublicUser: {
      id: string;
      url: string;
      display_name: string;
      email: string;
    };
    PushNotification: {
      id: string;
      url: string;
      account: string;
      external_id?: string | null;
      state: components["schemas"]["PushNotificationStateEnum"];
      notification: string;
      recipient: string;
      task: string;
      event?:
        | (
            | components["schemas"]["EventEnum"]
            | components["schemas"]["BlankEnum"]
            | components["schemas"]["NullEnum"]
          )
        | null;
      subject?: string;
      message: string;
      error?: string | null;
      pending_at: string;
      failed_at: string;
      sent_at: string;
      created_at: string;
    };
    PushNotificationStateEnum: "queued" | "pending" | "failed" | "sent";
    ReadableUser: {
      id: string;
      url: string;
      first_name?: string;
      last_name?: string;
      display_name: string;
      email: string;
      phone?: string;
      signature_image?: string;
    };
    RecipientEnum: "account" | "assignee" | "orderer" | "contact" | "client";
    Recurrence: {
      id: string;
      url: string;
      account: string;
      order: string;
      assign_worker?: boolean;
      is_active?: boolean;
      rrule: string;
      timezone?: components["schemas"]["TimezoneEnum"];
      last_recurred_at: string;
      last_scheduled_at: string;
      next_scheduled_at: string;
      tasks_data?: { [key: string]: unknown };
      created_at: string;
      updated_at: string;
    };
    RecurrenceListScene: {
      clients: components["schemas"]["Client"][];
      orders: components["schemas"]["Order"][];
      tasks: components["schemas"]["Task"][];
      assignees: components["schemas"]["ReadableUser"][];
      recurrences: components["schemas"]["Recurrence"][];
    };
    Registration: {
      account: components["schemas"]["RegistrationAccount"];
      user: components["schemas"]["RegistrationUser"];
      token: string;
    };
    RegistrationAccount: {
      id: string;
      url: string;
      name: string;
      timezone?:
        | (
            | components["schemas"]["TimezoneEnum"]
            | components["schemas"]["BlankEnum"]
            | components["schemas"]["NullEnum"]
          )
        | null;
      country_code?: string;
    };
    RegistrationUser: {
      id: string;
      url: string;
      name: string;
      email: string;
      phone?: string;
      password: string;
    };
    RenderRequest: {
      task: string;
    };
    Route: {
      id: string;
      url: string;
      external_id?: string | null;
      account: string;
      code: string;
      description?: string;
      assignee?: string;
      start_time?: string | null;
      start_location?: string | null;
      end_time?: string | null;
      end_location?: string | null;
      created_at: string;
      updated_at: string;
    };
    RouteOptimizationSerializerV2: {
      id: string;
      url: string;
      account: string;
      assignees: string[];
      state: components["schemas"]["RouteOptimizationSerializerV2StateEnum"];
      objective?:
        | (
            | components["schemas"]["ObjectiveEnum"]
            | components["schemas"]["NullEnum"]
          )
        | null;
      tasks: string[];
      start_time?: string | null;
      start_location?: { [key: string]: unknown } | null;
      end_location?: { [key: string]: unknown } | null;
      unassign_not_optimal?: boolean;
      total_distance: number;
      total_duration: { [key: string]: unknown };
      commit?: boolean;
      created_by?: string;
      created_at: string;
      updated_at: string;
    };
    RouteOptimizationSerializerV2StateEnum:
      | "pending"
      | "started"
      | "ready"
      | "completed"
      | "over_quota"
      | "failed";
    /**
     * Saves either a file or file_url.
     * in case S3 is used, it requires file name and file type and after save returns an upload url and saves the url.
     *
     * This serializer can not be used in other serializers if Amazon S3 upload is used.
     */
    S3FileUpload: {
      id: string;
      url: string;
      file: string;
      file_name: string;
      file_type: string;
      s3_signature: { [key: string]: unknown } | null;
      created_by: string;
      created_at: string;
      updated_at: string;
    };
    SMS: {
      id: string;
      url: string;
      account: string;
      external_id?: string;
      state: components["schemas"]["StateA81Enum"];
      notification: string;
      sender: string;
      alphanumeric_sender_id?: string;
      phone: string;
      message?: string | null;
      segments_count?: number;
      error?: string | null;
      sent_at: string;
      failed_at: string;
      received_at: string;
      created_at: string;
    };
    Signature: {
      id: string;
      url: string;
      account?: string;
      task: string;
      file_upload: string;
      file: string;
      file_name: string;
      signer: components["schemas"]["NestedContact"];
      documents?: string[];
      location?: { [key: string]: unknown } | null;
      created_by: string;
      created_at: string;
      updated_at: string;
    };
    State29fEnum: "unknown" | "stopped" | "moving";
    StateA81Enum: "queued" | "over_quota" | "sent" | "failed" | "received";
    StateE9aEnum: "pending" | "started" | "completed" | "failed";
    StateEf4Enum:
      | "unassigned"
      | "assigned"
      | "accepted"
      | "transit"
      | "active"
      | "completed"
      | "failed"
      | "cancelled";
    StatusEnum: "on_duty" | "off_duty";
    StripePayment: {
      id: string;
      url: string;
      billable_account: string;
      invoice: string | null;
      state?: components["schemas"]["StripePaymentStateEnum"];
      stripe_id?: string | null;
      stripe_state?:
        | (
            | components["schemas"]["StripeStateEnum"]
            | components["schemas"]["NullEnum"]
          )
        | null;
      amount: string;
      currency?: string;
      timestamp?: string | null;
      response?: string | null;
      created_at: string;
      updated_at: string;
    };
    StripePaymentStateEnum:
      | "draft"
      | "failed"
      | "saved"
      | "settled"
      | "rejected"
      | "retried"
      | "cancelled";
    StripeStateEnum:
      | "requires_payment_method"
      | "requires_confirmation"
      | "requires_capture"
      | "requires_action"
      | "processing"
      | "succeeded"
      | "canceled";
    Task: {
      id?: string | null;
      url: string;
      account: string;
      order?: string | null;
      route?: string | null;
      order_reference: string;
      external_id?: string | null;
      category?: components["schemas"]["CategoryEnum"];
      orderer?: string | null;
      orderer_name: string;
      receiver?: string | null;
      contact?: components["schemas"]["NestedContact"];
      address: components["schemas"]["NestedAddress"];
      description?: string;
      reference?: string;
      complete_after?: string | null;
      complete_before?: string | null;
      scheduled_time?: string | null;
      state: components["schemas"]["StateEf4Enum"];
      completed_at: string;
      cancelled_at: string;
      assignee?: string | null;
      auto_assign?: boolean;
      assignee_proximity: components["schemas"]["AssigneeProximityEnum"];
      position?: string | null;
      priority?: number;
      duration?: { [key: string]: unknown } | null;
      size?: number[] | null;
      is_full_load?: boolean;
      metafields?: { [key: string]: unknown };
      forms?: { [key: string]: unknown };
      created_by: string;
      issues: string;
      created_at: string;
      updated_at: string;
      events: string;
      documents: string;
      signatures: string;
      actions: string;
      counts: string;
    };
    TaskAccountChange: {
      account: string;
    };
    TaskAction: {
      notes?: string;
      location?: { [key: string]: unknown } | null;
    };
    /**
     * A subclass of ModelSerializer
     * that outputs geojson-ready data as
     * features and feature collections
     */
    TaskAddressFeature: {
      model: string;
      id: string;
      task: string;
      formatted_address: string;
      category?: components["schemas"]["CategoryEnum"];
      state?: components["schemas"]["StateEf4Enum"];
      geometry: string;
    };
    TaskAssign: {
      notes?: string;
      location?: { [key: string]: unknown } | null;
      assignee: string;
    };
    TaskCategoryEnum: "assignment" | "pick_up" | "drop_off" | "warehouse";
    TaskCommand: {
      id: string;
      url: string;
      account: string;
      task: string;
      external_id?: string | null;
      time: string;
      action: components["schemas"]["ActionEnum"];
      user: string;
      notes?: string;
      location?: { [key: string]: unknown } | null;
      assignee?: string | null;
      state?: components["schemas"]["TaskCommandStateEnum"];
      error_message?: string;
      metafields?: { [key: string]: unknown };
      accepted_at?: string | null;
      rejected_at?: string | null;
      created_at: string;
      updated_at: string;
    };
    TaskCommandStateEnum: "pending" | "accepted" | "rejected";
    TaskEvent: {
      id: string;
      url: string;
      account: string;
      task: string;
      task_command: string;
      field: components["schemas"]["FieldEnum"];
      event: components["schemas"]["EventEnum"];
      from_state: components["schemas"]["FromStateEnum"];
      to_state: components["schemas"]["ToStateEnum"];
      user: string;
      notes?: string;
      location?: { [key: string]: unknown } | null;
      assignee: string;
      created_at: string;
      updated_at: string;
    };
    TaskEventSerializerV2: {
      id: string;
      url: string;
      account: string;
      task: components["schemas"]["TaskSerializerV2"];
      task_command: string;
      field: components["schemas"]["FieldEnum"];
      event: components["schemas"]["EventEnum"];
      from_state: components["schemas"]["FromStateEnum"];
      to_state: components["schemas"]["ToStateEnum"];
      user: string;
      notes?: string;
      location?: { [key: string]: unknown } | null;
      assignee: string;
      created_at: string;
      updated_at: string;
    };
    /**
     * A subclass of ModelSerializer
     * that outputs geojson-ready data as
     * features and feature collections
     */
    TaskEventTrack: {
      id: string;
      model: string;
      url: string;
      task: string;
      task_event: string;
      event: components["schemas"]["EventEnum"];
      from_state: components["schemas"]["FromStateEnum"];
      to_state: components["schemas"]["ToStateEnum"];
      user: string;
      notes?: string;
      assignee?: string | null;
      created_at: string;
      updated_at: string;
      track: string;
    };
    TaskExpiryStateEnum: "cancelled" | "completed";
    TaskExport: {
      id?: string | null;
      external_id?: string | null;
      category?: components["schemas"]["CategoryEnum"];
      description?: string;
      reference?: string;
      complete_after?: string | null;
      complete_before?: string | null;
      scheduled_time?: string | null;
      state: components["schemas"]["StateEf4Enum"];
      position?: string | null;
      priority?: number;
      duration?: { [key: string]: unknown } | null;
      is_full_load?: boolean;
      created_at: string;
      updated_at: string;
      account_name: string;
      order_id?: string;
      order_external_id?: string;
      order_reference?: string;
      order_auto_assign?: string;
      order_created_by?: string;
      order_created_at?: string;
      orderer_name?: string;
      receiver_name?: string;
      contact_name?: string;
      contact_company?: string;
      contact_email?: string;
      contact_phone?: string;
      contact_notes?: string;
      assignee_first_name?: string;
      assignee_last_name?: string;
      assignee_email?: string;
      assignee_phone?: string;
      address_raw_address?: string;
      address_formatted_address?: string;
      address_location: { [key: string]: unknown };
      address_google_place_id?: string;
      address_point_of_interest?: string;
      address_street?: string;
      address_house_number?: string;
      address_apartment_number?: string;
      address_city?: string;
      address_state?: string;
      address_postal_code?: string;
      address_country?: string;
      address_country_code?: string;
      task_event_notes: string;
      events_count: number;
      task_event_notes_count?: number;
      documents_count: number;
      signatures_count: number;
      forms_count: number;
      forms_completed_count: number;
      last_task_event_notes?: string;
      unassigned_duration: { [key: string]: unknown };
      assigned_duration: { [key: string]: unknown };
      accepted_duration: { [key: string]: unknown };
      transit_duration: { [key: string]: unknown };
      active_duration: { [key: string]: unknown };
      completed_duration: { [key: string]: unknown };
      failed_duration: { [key: string]: unknown };
      cancelled_duration: { [key: string]: unknown };
      unassigned_distance: number;
      assigned_distance: number;
      accepted_distance: number;
      transit_distance: number;
      active_distance: number;
      completed_distance: number;
      failed_distance: number;
      cancelled_distance: number;
      last_unassigned_at?: string;
      last_assigned_at?: string;
      last_accepted_at?: string;
      last_transit_at?: string;
      last_active_at?: string;
      last_completed_at?: string;
      last_failed_at?: string;
      last_cancelled_at?: string;
    };
    TaskForm: {
      id: string;
      url: string;
      task: string;
      name: string;
      link: string;
      edit_url: string;
      view_url?: string;
      pdf_url?: string;
      completed?: boolean;
      created_at: string;
      updated_at: string;
    };
    TaskListReorderRequest: {
      account: string;
      assignee: string | null;
      assign_tasks: string[];
      reorder_tasks: string[];
    };
    TaskListScene: {
      clients: components["schemas"]["Client"][];
      orders: components["schemas"]["Order"][];
      tasks: components["schemas"]["LegacyTask"][];
      task_metadatas: components["schemas"]["TaskMetadata"][];
      task_events_with_notes: components["schemas"]["TaskEvent"][];
      users: components["schemas"]["PublicUser"][];
      updated_at: string;
    };
    TaskMetadata: {
      id: string;
      url: string;
      task: string;
      events_count?: number | null;
      task_event_notes_count?: number | null;
      documents_count?: number | null;
      signatures_count?: number | null;
      forms_count?: number | null;
      forms_completed_count?: number | null;
      last_task_event_notes?: string;
      unassigned_duration?: { [key: string]: unknown } | null;
      assigned_duration?: { [key: string]: unknown } | null;
      accepted_duration?: { [key: string]: unknown } | null;
      transit_duration?: { [key: string]: unknown } | null;
      active_duration?: { [key: string]: unknown } | null;
      completed_duration?: { [key: string]: unknown } | null;
      failed_duration?: { [key: string]: unknown } | null;
      cancelled_duration?: { [key: string]: unknown } | null;
      unassigned_distance?: number | null;
      assigned_distance?: number | null;
      accepted_distance?: number | null;
      transit_distance?: number | null;
      active_distance?: number | null;
      completed_distance?: number | null;
      failed_distance?: number | null;
      cancelled_distance?: number | null;
      last_unassigned_at?: string | null;
      last_assigned_at?: string | null;
      last_accepted_at?: string | null;
      last_transit_at?: string | null;
      last_active_at?: string | null;
      last_completed_at?: string | null;
      last_failed_at?: string | null;
      last_cancelled_at?: string | null;
    };
    TaskSerializerV2: {
      id?: string | null;
      external_id?: string | null;
      reference?: string;
      url: string;
      account: string;
      state: components["schemas"]["StateEf4Enum"];
      assignee?: string | null;
      order?: string | null;
      orderer_name: string;
      route?: string | null;
      category?: components["schemas"]["CategoryEnum"];
      contact?: components["schemas"]["NestedContact"];
      address: components["schemas"]["NestedAddress"];
      description?: string;
      complete_after?: string | null;
      complete_before?: string | null;
      scheduled_time?: string | null;
      completed_at: string;
      cancelled_at: string;
      auto_assign?: boolean;
      assignee_proximity: components["schemas"]["AssigneeProximityEnum"];
      position?: number;
      priority?: number;
      duration?: { [key: string]: unknown } | null;
      size?: number[] | null;
      documents?: string[];
      signatures?: string[];
      metafields?: { [key: string]: unknown };
      issues: string;
      counts: string;
      actions: string;
      created_at: string;
      updated_at: string;
    };
    TasksBackgroundImport: {
      id: string;
      url: string;
      account: string;
      created_by: string;
      tasks_data: { [key: string]: unknown }[];
      state: components["schemas"]["StateE9aEnum"];
      started_at: string;
      completed_at: string;
      failed_at: string;
      errors?: { [key: string]: unknown };
      celery_task_id?: string | null;
      tasks_created: string[];
      assignees: string[];
      created_at: string;
      updated_at: string;
    };
    TimeLocation: {
      id: string;
      url: string;
      source: string;
      user: string;
      time: string;
      location: { [key: string]: unknown };
      state?: components["schemas"]["State29fEnum"];
      heading?: number | null;
      speed?: number | null;
      altitude?: number | null;
      accuracy?: number | null;
      battery_level?: string | null;
      created_at: string;
      updated_at: string;
    };
    /**
     * A subclass of ModelSerializer
     * that outputs geojson-ready data as
     * features and feature collections
     */
    TimeLocationFeature: {
      model: string;
      id: string;
      source: string;
      user: string;
      time: string;
      state?: components["schemas"]["State29fEnum"];
      heading?: number | null;
      speed?: number | null;
      altitude?: number | null;
      accuracy?: number | null;
      battery_level?: string | null;
      created_at: string;
      updated_at: string;
      location: string;
    };
    TimezoneEnum:
      | "Africa/Abidjan"
      | "Africa/Accra"
      | "Africa/Addis_Ababa"
      | "Africa/Algiers"
      | "Africa/Asmara"
      | "Africa/Bamako"
      | "Africa/Bangui"
      | "Africa/Banjul"
      | "Africa/Bissau"
      | "Africa/Blantyre"
      | "Africa/Brazzaville"
      | "Africa/Bujumbura"
      | "Africa/Cairo"
      | "Africa/Casablanca"
      | "Africa/Ceuta"
      | "Africa/Conakry"
      | "Africa/Dakar"
      | "Africa/Dar_es_Salaam"
      | "Africa/Djibouti"
      | "Africa/Douala"
      | "Africa/El_Aaiun"
      | "Africa/Freetown"
      | "Africa/Gaborone"
      | "Africa/Harare"
      | "Africa/Johannesburg"
      | "Africa/Juba"
      | "Africa/Kampala"
      | "Africa/Khartoum"
      | "Africa/Kigali"
      | "Africa/Kinshasa"
      | "Africa/Lagos"
      | "Africa/Libreville"
      | "Africa/Lome"
      | "Africa/Luanda"
      | "Africa/Lubumbashi"
      | "Africa/Lusaka"
      | "Africa/Malabo"
      | "Africa/Maputo"
      | "Africa/Maseru"
      | "Africa/Mbabane"
      | "Africa/Mogadishu"
      | "Africa/Monrovia"
      | "Africa/Nairobi"
      | "Africa/Ndjamena"
      | "Africa/Niamey"
      | "Africa/Nouakchott"
      | "Africa/Ouagadougou"
      | "Africa/Porto-Novo"
      | "Africa/Sao_Tome"
      | "Africa/Tripoli"
      | "Africa/Tunis"
      | "Africa/Windhoek"
      | "America/Adak"
      | "America/Anchorage"
      | "America/Anguilla"
      | "America/Antigua"
      | "America/Araguaina"
      | "America/Argentina/Buenos_Aires"
      | "America/Argentina/Catamarca"
      | "America/Argentina/Cordoba"
      | "America/Argentina/Jujuy"
      | "America/Argentina/La_Rioja"
      | "America/Argentina/Mendoza"
      | "America/Argentina/Rio_Gallegos"
      | "America/Argentina/Salta"
      | "America/Argentina/San_Juan"
      | "America/Argentina/San_Luis"
      | "America/Argentina/Tucuman"
      | "America/Argentina/Ushuaia"
      | "America/Aruba"
      | "America/Asuncion"
      | "America/Atikokan"
      | "America/Bahia"
      | "America/Bahia_Banderas"
      | "America/Barbados"
      | "America/Belem"
      | "America/Belize"
      | "America/Blanc-Sablon"
      | "America/Boa_Vista"
      | "America/Bogota"
      | "America/Boise"
      | "America/Cambridge_Bay"
      | "America/Campo_Grande"
      | "America/Cancun"
      | "America/Caracas"
      | "America/Cayenne"
      | "America/Cayman"
      | "America/Chicago"
      | "America/Chihuahua"
      | "America/Costa_Rica"
      | "America/Creston"
      | "America/Cuiaba"
      | "America/Curacao"
      | "America/Danmarkshavn"
      | "America/Dawson"
      | "America/Dawson_Creek"
      | "America/Denver"
      | "America/Detroit"
      | "America/Dominica"
      | "America/Edmonton"
      | "America/Eirunepe"
      | "America/El_Salvador"
      | "America/Fort_Nelson"
      | "America/Fortaleza"
      | "America/Glace_Bay"
      | "America/Goose_Bay"
      | "America/Grand_Turk"
      | "America/Grenada"
      | "America/Guadeloupe"
      | "America/Guatemala"
      | "America/Guayaquil"
      | "America/Guyana"
      | "America/Halifax"
      | "America/Havana"
      | "America/Hermosillo"
      | "America/Indiana/Indianapolis"
      | "America/Indiana/Knox"
      | "America/Indiana/Marengo"
      | "America/Indiana/Petersburg"
      | "America/Indiana/Tell_City"
      | "America/Indiana/Vevay"
      | "America/Indiana/Vincennes"
      | "America/Indiana/Winamac"
      | "America/Inuvik"
      | "America/Iqaluit"
      | "America/Jamaica"
      | "America/Juneau"
      | "America/Kentucky/Louisville"
      | "America/Kentucky/Monticello"
      | "America/Kralendijk"
      | "America/La_Paz"
      | "America/Lima"
      | "America/Los_Angeles"
      | "America/Lower_Princes"
      | "America/Maceio"
      | "America/Managua"
      | "America/Manaus"
      | "America/Marigot"
      | "America/Martinique"
      | "America/Matamoros"
      | "America/Mazatlan"
      | "America/Menominee"
      | "America/Merida"
      | "America/Metlakatla"
      | "America/Mexico_City"
      | "America/Miquelon"
      | "America/Moncton"
      | "America/Monterrey"
      | "America/Montevideo"
      | "America/Montserrat"
      | "America/Nassau"
      | "America/New_York"
      | "America/Nipigon"
      | "America/Nome"
      | "America/Noronha"
      | "America/North_Dakota/Beulah"
      | "America/North_Dakota/Center"
      | "America/North_Dakota/New_Salem"
      | "America/Nuuk"
      | "America/Ojinaga"
      | "America/Panama"
      | "America/Pangnirtung"
      | "America/Paramaribo"
      | "America/Phoenix"
      | "America/Port-au-Prince"
      | "America/Port_of_Spain"
      | "America/Porto_Velho"
      | "America/Puerto_Rico"
      | "America/Punta_Arenas"
      | "America/Rainy_River"
      | "America/Rankin_Inlet"
      | "America/Recife"
      | "America/Regina"
      | "America/Resolute"
      | "America/Rio_Branco"
      | "America/Santarem"
      | "America/Santiago"
      | "America/Santo_Domingo"
      | "America/Sao_Paulo"
      | "America/Scoresbysund"
      | "America/Sitka"
      | "America/St_Barthelemy"
      | "America/St_Johns"
      | "America/St_Kitts"
      | "America/St_Lucia"
      | "America/St_Thomas"
      | "America/St_Vincent"
      | "America/Swift_Current"
      | "America/Tegucigalpa"
      | "America/Thule"
      | "America/Thunder_Bay"
      | "America/Tijuana"
      | "America/Toronto"
      | "America/Tortola"
      | "America/Vancouver"
      | "America/Whitehorse"
      | "America/Winnipeg"
      | "America/Yakutat"
      | "America/Yellowknife"
      | "Antarctica/Casey"
      | "Antarctica/Davis"
      | "Antarctica/DumontDUrville"
      | "Antarctica/Macquarie"
      | "Antarctica/Mawson"
      | "Antarctica/McMurdo"
      | "Antarctica/Palmer"
      | "Antarctica/Rothera"
      | "Antarctica/Syowa"
      | "Antarctica/Troll"
      | "Antarctica/Vostok"
      | "Arctic/Longyearbyen"
      | "Asia/Aden"
      | "Asia/Almaty"
      | "Asia/Amman"
      | "Asia/Anadyr"
      | "Asia/Aqtau"
      | "Asia/Aqtobe"
      | "Asia/Ashgabat"
      | "Asia/Atyrau"
      | "Asia/Baghdad"
      | "Asia/Bahrain"
      | "Asia/Baku"
      | "Asia/Bangkok"
      | "Asia/Barnaul"
      | "Asia/Beirut"
      | "Asia/Bishkek"
      | "Asia/Brunei"
      | "Asia/Chita"
      | "Asia/Choibalsan"
      | "Asia/Colombo"
      | "Asia/Damascus"
      | "Asia/Dhaka"
      | "Asia/Dili"
      | "Asia/Dubai"
      | "Asia/Dushanbe"
      | "Asia/Famagusta"
      | "Asia/Gaza"
      | "Asia/Hebron"
      | "Asia/Ho_Chi_Minh"
      | "Asia/Hong_Kong"
      | "Asia/Hovd"
      | "Asia/Irkutsk"
      | "Asia/Jakarta"
      | "Asia/Jayapura"
      | "Asia/Jerusalem"
      | "Asia/Kabul"
      | "Asia/Kamchatka"
      | "Asia/Karachi"
      | "Asia/Kathmandu"
      | "Asia/Khandyga"
      | "Asia/Kolkata"
      | "Asia/Krasnoyarsk"
      | "Asia/Kuala_Lumpur"
      | "Asia/Kuching"
      | "Asia/Kuwait"
      | "Asia/Macau"
      | "Asia/Magadan"
      | "Asia/Makassar"
      | "Asia/Manila"
      | "Asia/Muscat"
      | "Asia/Nicosia"
      | "Asia/Novokuznetsk"
      | "Asia/Novosibirsk"
      | "Asia/Omsk"
      | "Asia/Oral"
      | "Asia/Phnom_Penh"
      | "Asia/Pontianak"
      | "Asia/Pyongyang"
      | "Asia/Qatar"
      | "Asia/Qostanay"
      | "Asia/Qyzylorda"
      | "Asia/Riyadh"
      | "Asia/Sakhalin"
      | "Asia/Samarkand"
      | "Asia/Seoul"
      | "Asia/Shanghai"
      | "Asia/Singapore"
      | "Asia/Srednekolymsk"
      | "Asia/Taipei"
      | "Asia/Tashkent"
      | "Asia/Tbilisi"
      | "Asia/Tehran"
      | "Asia/Thimphu"
      | "Asia/Tokyo"
      | "Asia/Tomsk"
      | "Asia/Ulaanbaatar"
      | "Asia/Urumqi"
      | "Asia/Ust-Nera"
      | "Asia/Vientiane"
      | "Asia/Vladivostok"
      | "Asia/Yakutsk"
      | "Asia/Yangon"
      | "Asia/Yekaterinburg"
      | "Asia/Yerevan"
      | "Atlantic/Azores"
      | "Atlantic/Bermuda"
      | "Atlantic/Canary"
      | "Atlantic/Cape_Verde"
      | "Atlantic/Faroe"
      | "Atlantic/Madeira"
      | "Atlantic/Reykjavik"
      | "Atlantic/South_Georgia"
      | "Atlantic/St_Helena"
      | "Atlantic/Stanley"
      | "Australia/Adelaide"
      | "Australia/Brisbane"
      | "Australia/Broken_Hill"
      | "Australia/Darwin"
      | "Australia/Eucla"
      | "Australia/Hobart"
      | "Australia/Lindeman"
      | "Australia/Lord_Howe"
      | "Australia/Melbourne"
      | "Australia/Perth"
      | "Australia/Sydney"
      | "Canada/Atlantic"
      | "Canada/Central"
      | "Canada/Eastern"
      | "Canada/Mountain"
      | "Canada/Newfoundland"
      | "Canada/Pacific"
      | "Europe/Amsterdam"
      | "Europe/Andorra"
      | "Europe/Astrakhan"
      | "Europe/Athens"
      | "Europe/Belgrade"
      | "Europe/Berlin"
      | "Europe/Bratislava"
      | "Europe/Brussels"
      | "Europe/Bucharest"
      | "Europe/Budapest"
      | "Europe/Busingen"
      | "Europe/Chisinau"
      | "Europe/Copenhagen"
      | "Europe/Dublin"
      | "Europe/Gibraltar"
      | "Europe/Guernsey"
      | "Europe/Helsinki"
      | "Europe/Isle_of_Man"
      | "Europe/Istanbul"
      | "Europe/Jersey"
      | "Europe/Kaliningrad"
      | "Europe/Kiev"
      | "Europe/Kirov"
      | "Europe/Lisbon"
      | "Europe/Ljubljana"
      | "Europe/London"
      | "Europe/Luxembourg"
      | "Europe/Madrid"
      | "Europe/Malta"
      | "Europe/Mariehamn"
      | "Europe/Minsk"
      | "Europe/Monaco"
      | "Europe/Moscow"
      | "Europe/Oslo"
      | "Europe/Paris"
      | "Europe/Podgorica"
      | "Europe/Prague"
      | "Europe/Riga"
      | "Europe/Rome"
      | "Europe/Samara"
      | "Europe/San_Marino"
      | "Europe/Sarajevo"
      | "Europe/Saratov"
      | "Europe/Simferopol"
      | "Europe/Skopje"
      | "Europe/Sofia"
      | "Europe/Stockholm"
      | "Europe/Tallinn"
      | "Europe/Tirane"
      | "Europe/Ulyanovsk"
      | "Europe/Uzhgorod"
      | "Europe/Vaduz"
      | "Europe/Vatican"
      | "Europe/Vienna"
      | "Europe/Vilnius"
      | "Europe/Volgograd"
      | "Europe/Warsaw"
      | "Europe/Zagreb"
      | "Europe/Zaporozhye"
      | "Europe/Zurich"
      | "GMT"
      | "Indian/Antananarivo"
      | "Indian/Chagos"
      | "Indian/Christmas"
      | "Indian/Cocos"
      | "Indian/Comoro"
      | "Indian/Kerguelen"
      | "Indian/Mahe"
      | "Indian/Maldives"
      | "Indian/Mauritius"
      | "Indian/Mayotte"
      | "Indian/Reunion"
      | "Pacific/Apia"
      | "Pacific/Auckland"
      | "Pacific/Bougainville"
      | "Pacific/Chatham"
      | "Pacific/Chuuk"
      | "Pacific/Easter"
      | "Pacific/Efate"
      | "Pacific/Fakaofo"
      | "Pacific/Fiji"
      | "Pacific/Funafuti"
      | "Pacific/Galapagos"
      | "Pacific/Gambier"
      | "Pacific/Guadalcanal"
      | "Pacific/Guam"
      | "Pacific/Honolulu"
      | "Pacific/Kanton"
      | "Pacific/Kiritimati"
      | "Pacific/Kosrae"
      | "Pacific/Kwajalein"
      | "Pacific/Majuro"
      | "Pacific/Marquesas"
      | "Pacific/Midway"
      | "Pacific/Nauru"
      | "Pacific/Niue"
      | "Pacific/Norfolk"
      | "Pacific/Noumea"
      | "Pacific/Pago_Pago"
      | "Pacific/Palau"
      | "Pacific/Pitcairn"
      | "Pacific/Pohnpei"
      | "Pacific/Port_Moresby"
      | "Pacific/Rarotonga"
      | "Pacific/Saipan"
      | "Pacific/Tahiti"
      | "Pacific/Tarawa"
      | "Pacific/Tongatapu"
      | "Pacific/Wake"
      | "Pacific/Wallis"
      | "US/Alaska"
      | "US/Arizona"
      | "US/Central"
      | "US/Eastern"
      | "US/Hawaii"
      | "US/Mountain"
      | "US/Pacific"
      | "UTC";
    ToStateEnum:
      | "unassigned"
      | "assigned"
      | "accepted"
      | "transit"
      | "active"
      | "completed"
      | "failed"
      | "cancelled"
      | "away"
      | "near";
    Tracker: {
      id: string;
      url: string;
      account: string;
      tasks: string[];
      active_from?: string | null;
      active_until?: string | null;
      active_states?: components["schemas"]["ActiveStatesEnum"][];
      show_driver_info?: boolean;
      show_destination?: boolean;
      show_eta?: boolean;
      show_sms_action?: boolean;
      show_call_action?: boolean;
      show_logo?: boolean;
      show_path?: boolean;
      autozoom?: boolean;
      max_zoom_level?: number | null;
      tracking_page_url: string;
    };
    TypeEnum: "service" | "delivery";
    User:
      | components["schemas"]["OnDuty"]
      | components["schemas"]["AuthenticatedUserCreate"]
      | components["schemas"]["AuthenticatedUserUpdate"]
      | components["schemas"]["ReadableUser"];
    ValueTypeEnum: "string" | "integer" | "decimal" | "choice";
    VehicleProfileEnum:
      | "bike"
      | "bus"
      | "car"
      | "foot"
      | "scooter"
      | "small_truck"
      | "truck";
    VersionEnum: "1.0" | "2.0";
    Webhook: {
      id: string;
      url: string;
      account: string;
      name: string;
      version?: components["schemas"]["VersionEnum"];
      state: components["schemas"]["WebhookStateEnum"];
      headers?: { [key: string]: unknown };
      target: string;
      task_events?: boolean;
      document_events?: boolean;
      signature_events?: boolean;
      notification_emails?: string[];
      failure_count: number;
      disable_message: string;
      activated_at: string;
      disabled_at: string;
      created_at: string;
      updated_at: string;
    };
    WebhookStateEnum: "inactive" | "active" | "disabled";
    /**
     * A subclass of ModelSerializer
     * that outputs geojson-ready data as
     * features and feature collections
     */
    WorkerFeature: {
      model: string;
      id: string;
      url: string;
      time_location: string;
      source: string;
      user: string;
      user_name: string;
      time: string;
      state?: components["schemas"]["State29fEnum"];
      heading?: number | null;
      speed?: number | null;
      altitude?: number | null;
      accuracy?: number | null;
      battery_level?: string | null;
      created_at: string;
      updated_at: string;
      location: string;
    };
    /**
     * A subclass of ModelSerializer
     * that outputs geojson-ready data as
     * features and feature collections
     */
    WorkerTrack: {
      id: string;
      track: string;
      user: string;
      start_time: string;
      end_time: string;
    };
    WorkingState: {
      account_role?: string;
      account?: string;
      user?: string;
      mode?: components["schemas"]["ModeEnum"];
      timestamp?: string;
      status: components["schemas"]["StatusEnum"];
      created_at: string;
    };
  };
}

export interface operations {
  account_roles_list: {
    parameters: {
      query: {
        /** account */
        account?: string;
        /** The pagination cursor value. */
        cursor?: number;
        /** display_name */
        display_name?: string;
        format?: "json" | "xml";
        /** is_integration */
        is_integration?: string;
        /** is_manager */
        is_manager?: string;
        /** is_worker */
        is_worker?: string;
        /** Which field to use when ordering the results. */
        ordering?: string;
        /** Number of results to return per page. */
        page_size?: number;
        /** A search term. */
        search?: string;
        /** state */
        state?: "inactive" | "active" | "deleted";
        /** user */
        user?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedAccountRoleList"];
          "application/xml": components["schemas"]["PaginatedAccountRoleList"];
        };
      };
    };
  };
  account_roles_create: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["AccountRole"];
          "application/xml": components["schemas"]["AccountRole"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AccountRole"];
        "application/xml": components["schemas"]["AccountRole"];
      };
    };
  };
  account_roles_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
      path: {
        /** A UUID string identifying this account role. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AccountRole"];
          "application/xml": components["schemas"]["AccountRole"];
        };
      };
    };
  };
  account_roles_update: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
      path: {
        /** A UUID string identifying this account role. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AccountRole"];
          "application/xml": components["schemas"]["AccountRole"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AccountRole"];
        "application/xml": components["schemas"]["AccountRole"];
      };
    };
  };
  account_roles_destroy: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
      path: {
        /** A UUID string identifying this account role. */
        id: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  account_roles_partial_update: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
      path: {
        /** A UUID string identifying this account role. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AccountRole"];
          "application/xml": components["schemas"]["AccountRole"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedAccountRole"];
        "application/xml": components["schemas"]["PatchedAccountRole"];
      };
    };
  };
  account_roles_notify_create: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
      path: {
        /** A UUID string identifying this account role. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AccountRole"];
          "application/xml": components["schemas"]["AccountRole"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AccountRole"];
        "application/xml": components["schemas"]["AccountRole"];
      };
    };
  };
  account_roles_token_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
      path: {
        /** A UUID string identifying this account role. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AccountRole"];
          "application/xml": components["schemas"]["AccountRole"];
        };
      };
    };
  };
  accounts_list: {
    parameters: {
      query: {
        /** The pagination cursor value. */
        cursor?: number;
        format?: "json" | "xlsx";
        /** Number of results to return per page. */
        page_size?: number;
        /** A search term. */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedAccountList"];
          "application/xlsx": components["schemas"]["PaginatedAccountList"];
        };
      };
    };
  };
  accounts_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this account. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Account"];
          "application/xlsx": components["schemas"]["Account"];
        };
      };
    };
  };
  accounts_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this account. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Account"];
          "application/xlsx": components["schemas"]["Account"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Account"];
        "application/x-www-form-urlencoded": components["schemas"]["Account"];
        "multipart/form-data": components["schemas"]["Account"];
      };
    };
  };
  accounts_partial_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this account. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Account"];
          "application/xlsx": components["schemas"]["Account"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedAccount"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedAccount"];
        "multipart/form-data": components["schemas"]["PatchedAccount"];
      };
    };
  };
  accounts_braintree_customer_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this account. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Account"];
          "application/xlsx": components["schemas"]["Account"];
        };
      };
    };
  };
  accounts_managers_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this account. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AccountUser"];
          "application/xlsx": components["schemas"]["AccountUser"];
        };
      };
    };
  };
  accounts_managers_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this account. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AccountUser"];
          "application/xlsx": components["schemas"]["AccountUser"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AccountUser"];
        "application/x-www-form-urlencoded": components["schemas"]["AccountUser"];
        "multipart/form-data": components["schemas"]["AccountUser"];
      };
    };
  };
  accounts_managers_destroy: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this account. */
        id: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  /**
   * Action to (re)set the account stripe customer and payment method to new values.
   * By default the attached method will also be set as default.
   * If this is not desired, you can send
   *
   *     'set_default': False
   */
  accounts_stripe_attach_payment_method_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this account. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AccountStripePaymentMethodAttach"];
          "application/xlsx": components["schemas"]["AccountStripePaymentMethodAttach"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AccountStripePaymentMethodAttach"];
        "application/x-www-form-urlencoded": components["schemas"]["AccountStripePaymentMethodAttach"];
        "multipart/form-data": components["schemas"]["AccountStripePaymentMethodAttach"];
      };
    };
  };
  /** Action to start a new setup intent. */
  accounts_stripe_create_setup_intent_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this account. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AccountStripeSetupIntentCreate"];
          "application/xlsx": components["schemas"]["AccountStripeSetupIntentCreate"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AccountStripeSetupIntentCreate"];
        "application/x-www-form-urlencoded": components["schemas"]["AccountStripeSetupIntentCreate"];
        "multipart/form-data": components["schemas"]["AccountStripeSetupIntentCreate"];
      };
    };
  };
  /**
   * Detached payment method from the customer.
   * The payment method itself will remain somewhere in stripe, but as its no longer linked to the customer,
   * it might as well be deleted for us
   */
  accounts_stripe_detach_payment_method_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this account. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AccountStripePaymentMethodDetach"];
          "application/xlsx": components["schemas"]["AccountStripePaymentMethodDetach"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AccountStripePaymentMethodDetach"];
        "application/x-www-form-urlencoded": components["schemas"]["AccountStripePaymentMethodDetach"];
        "multipart/form-data": components["schemas"]["AccountStripePaymentMethodDetach"];
      };
    };
  };
  /**
   * Fetch a single payment method from stripe.
   * This will also return non-attached payment methods (from setup intents for example)
   */
  accounts_stripe_get_payment_method_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this account. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AccountStripePaymentMethodGet"];
          "application/xlsx": components["schemas"]["AccountStripePaymentMethodGet"];
        };
      };
    };
  };
  /** Fetch a single setup intent */
  accounts_stripe_get_setup_attempt_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this account. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AccountStripeSetupAttemptGet"];
          "application/xlsx": components["schemas"]["AccountStripeSetupAttemptGet"];
        };
      };
    };
  };
  /** Fetch a single setup intent */
  accounts_stripe_get_setup_intent_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this account. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AccountStripeSetupIntentGet"];
          "application/xlsx": components["schemas"]["AccountStripeSetupIntentGet"];
        };
      };
    };
  };
  /**
   * Fetch all customer payment methods.
   * This includes all attached payment methods, default method_id
   */
  accounts_stripe_payment_methods_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this account. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AccountStripePaymentMethods"];
          "application/xlsx": components["schemas"]["AccountStripePaymentMethods"];
        };
      };
    };
  };
  /** Action to set a payment method to default. */
  accounts_stripe_set_default_payment_method_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this account. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AccountStripePaymentMethodSetDefault"];
          "application/xlsx": components["schemas"]["AccountStripePaymentMethodSetDefault"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AccountStripePaymentMethodSetDefault"];
        "application/x-www-form-urlencoded": components["schemas"]["AccountStripePaymentMethodSetDefault"];
        "multipart/form-data": components["schemas"]["AccountStripePaymentMethodSetDefault"];
      };
    };
  };
  /** Fetch existing setup intents */
  accounts_stripe_setup_intents_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this account. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AccountStripeSetupIntentsGet"];
          "application/xlsx": components["schemas"]["AccountStripeSetupIntentsGet"];
        };
      };
    };
  };
  accounts_workers_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this account. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AccountUser"];
          "application/xlsx": components["schemas"]["AccountUser"];
        };
      };
    };
  };
  accounts_workers_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this account. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AccountUser"];
          "application/xlsx": components["schemas"]["AccountUser"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AccountUser"];
        "application/x-www-form-urlencoded": components["schemas"]["AccountUser"];
        "multipart/form-data": components["schemas"]["AccountUser"];
      };
    };
  };
  accounts_workers_destroy: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this account. */
        id: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  addons_list: {
    parameters: {
      query: {
        /** The pagination cursor value. */
        cursor?: number;
        format?: "json" | "xlsx";
        /** Number of results to return per page. */
        page_size?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedAddonList"];
          "application/xlsx": components["schemas"]["PaginatedAddonList"];
        };
      };
    };
  };
  addons_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this addon. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Addon"];
          "application/xlsx": components["schemas"]["Addon"];
        };
      };
    };
  };
  authenticate_create: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AuthToken"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["AuthToken"];
        "multipart/form-data": components["schemas"]["AuthToken"];
        "application/json": components["schemas"]["AuthToken"];
      };
    };
  };
  billing_customers_list: {
    parameters: {
      query: {
        /** account */
        account?: string;
        /** The pagination cursor value. */
        cursor?: number;
        format?: "json" | "xlsx";
        /** Number of results to return per page. */
        page_size?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedBraintreeCustomerList"];
          "application/xlsx": components["schemas"]["PaginatedBraintreeCustomerList"];
        };
      };
    };
  };
  billing_customers_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["BraintreeCustomer"];
          "application/xlsx": components["schemas"]["BraintreeCustomer"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BraintreeCustomer"];
        "application/x-www-form-urlencoded": components["schemas"]["BraintreeCustomer"];
        "multipart/form-data": components["schemas"]["BraintreeCustomer"];
      };
    };
  };
  billing_customers_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this braintree customer. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BraintreeCustomer"];
          "application/xlsx": components["schemas"]["BraintreeCustomer"];
        };
      };
    };
  };
  billing_customers_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this braintree customer. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BraintreeCustomer"];
          "application/xlsx": components["schemas"]["BraintreeCustomer"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BraintreeCustomer"];
        "application/x-www-form-urlencoded": components["schemas"]["BraintreeCustomer"];
        "multipart/form-data": components["schemas"]["BraintreeCustomer"];
      };
    };
  };
  billing_customers_partial_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this braintree customer. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BraintreeCustomer"];
          "application/xlsx": components["schemas"]["BraintreeCustomer"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedBraintreeCustomer"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedBraintreeCustomer"];
        "multipart/form-data": components["schemas"]["PatchedBraintreeCustomer"];
      };
    };
  };
  billing_customers_client_token_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this braintree customer. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BraintreeCustomer"];
          "application/xlsx": components["schemas"]["BraintreeCustomer"];
        };
      };
    };
  };
  billing_invoices_list: {
    parameters: {
      query: {
        /** account */
        account?: string;
        /** billing_method */
        billing_method?: "braintree" | "invoice" | "stripe";
        /** created_at */
        created_at?: string;
        /** The pagination cursor value. */
        cursor?: number;
        format?: "json" | "xlsx";
        /** Number of results to return per page. */
        page_size?: number;
        /** state */
        state?: "draft" | "confirmed" | "overdue" | "paid" | "cancelled";
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedInvoiceList"];
          "application/xlsx": components["schemas"]["PaginatedInvoiceList"];
        };
      };
    };
  };
  billing_invoices_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this invoice. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Invoice"];
          "application/xlsx": components["schemas"]["Invoice"];
        };
      };
    };
  };
  billing_invoices_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this invoice. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Invoice"];
          "application/xlsx": components["schemas"]["Invoice"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Invoice"];
        "application/x-www-form-urlencoded": components["schemas"]["Invoice"];
        "multipart/form-data": components["schemas"]["Invoice"];
      };
    };
  };
  billing_invoices_partial_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this invoice. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Invoice"];
          "application/xlsx": components["schemas"]["Invoice"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedInvoice"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedInvoice"];
        "multipart/form-data": components["schemas"]["PatchedInvoice"];
      };
    };
  };
  billing_invoices_mark_as_paid_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this invoice. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Invoice"];
          "application/xlsx": components["schemas"]["Invoice"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Invoice"];
        "application/x-www-form-urlencoded": components["schemas"]["Invoice"];
        "multipart/form-data": components["schemas"]["Invoice"];
      };
    };
  };
  billing_stripe_payments_list: {
    parameters: {
      query: {
        /** billable_account */
        billable_account?: string;
        /** The pagination cursor value. */
        cursor?: number;
        format?: "json" | "xlsx";
        /** invoice */
        invoice?: string;
        /** Which field to use when ordering the results. */
        ordering?: string;
        /** Number of results to return per page. */
        page_size?: number;
        /** state */
        state?:
          | "draft"
          | "failed"
          | "saved"
          | "settled"
          | "rejected"
          | "retried"
          | "cancelled";
        /** stripe_state */
        stripe_state?:
          | null
          | "requires_payment_method"
          | "requires_confirmation"
          | "requires_capture"
          | "requires_action"
          | "processing"
          | "succeeded"
          | "canceled";
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedStripePaymentList"];
          "application/xlsx": components["schemas"]["PaginatedStripePaymentList"];
        };
      };
    };
  };
  billing_stripe_payments_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this stripe payment. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["StripePayment"];
          "application/xlsx": components["schemas"]["StripePayment"];
        };
      };
    };
  };
  billing_transactions_list: {
    parameters: {
      query: {
        /** The pagination cursor value. */
        cursor?: number;
        /** customer */
        customer?: string;
        format?: "json" | "xlsx";
        /** invoice__account */
        invoice__account?: string;
        /** Which field to use when ordering the results. */
        ordering?: string;
        /** Number of results to return per page. */
        page_size?: number;
        /** state */
        state?:
          | "draft"
          | "failed"
          | "saved"
          | "settled"
          | "rejected"
          | "voided"
          | "refunded"
          | "retried"
          | "cancelled"
          | "imported";
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedBraintreeTransactionList"];
          "application/xlsx": components["schemas"]["PaginatedBraintreeTransactionList"];
        };
      };
    };
  };
  billing_transactions_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this braintree transaction. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BraintreeTransaction"];
          "application/xlsx": components["schemas"]["BraintreeTransaction"];
        };
      };
    };
  };
  client_roles_list: {
    parameters: {
      query: {
        /** account */
        account?: string;
        /** client */
        client?: string;
        /** The pagination cursor value. */
        cursor?: number;
        format?: "json" | "xlsx";
        /** is_active */
        is_active?: string;
        /** is_manager */
        is_manager?: string;
        /** Number of results to return per page. */
        page_size?: number;
        /** A search term. */
        search?: string;
        /** user */
        user?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedClientRoleList"];
          "application/xlsx": components["schemas"]["PaginatedClientRoleList"];
        };
      };
    };
  };
  client_roles_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ClientRole"];
          "application/xlsx": components["schemas"]["ClientRole"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ClientRole"];
        "application/x-www-form-urlencoded": components["schemas"]["ClientRole"];
        "multipart/form-data": components["schemas"]["ClientRole"];
      };
    };
  };
  client_roles_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this client role. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ClientRole"];
          "application/xlsx": components["schemas"]["ClientRole"];
        };
      };
    };
  };
  client_roles_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this client role. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ClientRole"];
          "application/xlsx": components["schemas"]["ClientRole"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ClientRole"];
        "application/x-www-form-urlencoded": components["schemas"]["ClientRole"];
        "multipart/form-data": components["schemas"]["ClientRole"];
      };
    };
  };
  client_roles_partial_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this client role. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ClientRole"];
          "application/xlsx": components["schemas"]["ClientRole"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedClientRole"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedClientRole"];
        "multipart/form-data": components["schemas"]["PatchedClientRole"];
      };
    };
  };
  client_roles_notify_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this client role. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ClientRole"];
          "application/xlsx": components["schemas"]["ClientRole"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ClientRole"];
        "application/x-www-form-urlencoded": components["schemas"]["ClientRole"];
        "multipart/form-data": components["schemas"]["ClientRole"];
      };
    };
  };
  clients_list: {
    parameters: {
      query: {
        /** account */
        account?: string;
        /** The pagination cursor value. */
        cursor?: number;
        format?: "json" | "xlsx";
        /** Number of results to return per page. */
        page_size?: number;
        /** A search term. */
        search?: string;
        /** slug */
        slug?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedClientList"];
          "application/xlsx": components["schemas"]["PaginatedClientList"];
        };
      };
    };
  };
  clients_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Client"];
          "application/xlsx": components["schemas"]["Client"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Client"];
        "application/x-www-form-urlencoded": components["schemas"]["Client"];
        "multipart/form-data": components["schemas"]["Client"];
      };
    };
  };
  clients_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this client. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Client"];
          "application/xlsx": components["schemas"]["Client"];
        };
      };
    };
  };
  clients_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this client. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Client"];
          "application/xlsx": components["schemas"]["Client"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Client"];
        "application/x-www-form-urlencoded": components["schemas"]["Client"];
        "multipart/form-data": components["schemas"]["Client"];
      };
    };
  };
  clients_partial_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this client. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Client"];
          "application/xlsx": components["schemas"]["Client"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedClient"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedClient"];
        "multipart/form-data": components["schemas"]["PatchedClient"];
      };
    };
  };
  configurations_list: {
    parameters: {
      query: {
        /** The pagination cursor value. */
        cursor?: number;
        format?: "json" | "xlsx";
        /** Number of results to return per page. */
        page_size?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": { [key: string]: unknown }[];
          "application/xlsx": { [key: string]: unknown }[];
        };
      };
    };
  };
  contact_address_import_list: {
    parameters: {
      query: {
        /** The pagination cursor value. */
        cursor?: number;
        format?: "json" | "xlsx";
        /** Number of results to return per page. */
        page_size?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedContactAddressBackgroundImportList"];
          "application/xlsx": components["schemas"]["PaginatedContactAddressBackgroundImportList"];
        };
      };
    };
  };
  contact_address_import_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ContactAddressBackgroundImport"];
          "application/xlsx": components["schemas"]["ContactAddressBackgroundImport"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContactAddressBackgroundImport"];
        "application/x-www-form-urlencoded": components["schemas"]["ContactAddressBackgroundImport"];
        "multipart/form-data": components["schemas"]["ContactAddressBackgroundImport"];
      };
    };
  };
  contact_address_import_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this contact address background import. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ContactAddressBackgroundImport"];
          "application/xlsx": components["schemas"]["ContactAddressBackgroundImport"];
        };
      };
    };
  };
  contact_addresses_list: {
    parameters: {
      query: {
        /** account */
        account?: string;
        /** client */
        client?: string;
        /** The pagination cursor value. */
        cursor?: number;
        format?: "json" | "xlsx";
        /** is_orderer */
        is_orderer?: string;
        /** is_receiver */
        is_receiver?: string;
        /** Which field to use when ordering the results. */
        ordering?: string;
        /** Number of results to return per page. */
        page_size?: number;
        /** A search term. */
        search?: string;
        /** source */
        source?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedContactAddressList"];
          "application/xlsx": components["schemas"]["PaginatedContactAddressList"];
        };
      };
    };
  };
  contact_addresses_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ContactAddress"];
          "application/xlsx": components["schemas"]["ContactAddress"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContactAddress"];
        "application/x-www-form-urlencoded": components["schemas"]["ContactAddress"];
        "multipart/form-data": components["schemas"]["ContactAddress"];
      };
    };
  };
  contact_addresses_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this contact address. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ContactAddress"];
          "application/xlsx": components["schemas"]["ContactAddress"];
        };
      };
    };
  };
  contact_addresses_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this contact address. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ContactAddress"];
          "application/xlsx": components["schemas"]["ContactAddress"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContactAddress"];
        "application/x-www-form-urlencoded": components["schemas"]["ContactAddress"];
        "multipart/form-data": components["schemas"]["ContactAddress"];
      };
    };
  };
  contact_addresses_partial_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this contact address. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ContactAddress"];
          "application/xlsx": components["schemas"]["ContactAddress"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedContactAddress"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedContactAddress"];
        "multipart/form-data": components["schemas"]["PatchedContactAddress"];
      };
    };
  };
  devices_list: {
    parameters: {
      query: {
        /** The pagination cursor value. */
        cursor?: number;
        format?: "json" | "xlsx";
        /** Number of results to return per page. */
        page_size?: number;
        /** A search term. */
        search?: string;
        /** user */
        user?: string;
        /** user__account_roles__account */
        user__account_roles__account?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedDeviceList"];
          "application/xlsx": components["schemas"]["PaginatedDeviceList"];
        };
      };
    };
  };
  devices_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Device"];
          "application/xlsx": components["schemas"]["Device"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Device"];
        "application/x-www-form-urlencoded": components["schemas"]["Device"];
        "multipart/form-data": components["schemas"]["Device"];
      };
    };
  };
  devices_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this device. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Device"];
          "application/xlsx": components["schemas"]["Device"];
        };
      };
    };
  };
  /**
   * OpenApi3 schema for this API. Format can be selected via content negotiation.
   *
   * - YAML: application/vnd.oai.openapi
   * - JSON: application/vnd.oai.openapi+json
   */
  docs_schema_retrieve: {
    parameters: {
      query: {
        format?: "json" | "yaml";
        lang?:
          | "de"
          | "en"
          | "es"
          | "et"
          | "fi"
          | "fr"
          | "it"
          | "lt"
          | "lv"
          | "pl"
          | "ru"
          | "sv";
      };
    };
    responses: {
      200: {
        content: {
          "application/vnd.oai.openapi": { [key: string]: unknown };
          "application/yaml": { [key: string]: unknown };
          "application/vnd.oai.openapi+json": { [key: string]: unknown };
          "application/json": { [key: string]: unknown };
        };
      };
    };
  };
  documents_list: {
    parameters: {
      query: {
        /** The pagination cursor value. */
        cursor?: number;
        format?: "json" | "xlsx";
        /** order */
        order?: string;
        /** Which field to use when ordering the results. */
        ordering?: string;
        /** Number of results to return per page. */
        page_size?: number;
        /** A search term. */
        search?: string;
        /** task */
        task?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedDocumentList"];
          "application/xlsx": components["schemas"]["PaginatedDocumentList"];
        };
      };
    };
  };
  documents_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Document"];
          "application/xlsx": components["schemas"]["Document"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Document"];
        "application/x-www-form-urlencoded": components["schemas"]["Document"];
        "multipart/form-data": components["schemas"]["Document"];
      };
    };
  };
  documents_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this document. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Document"];
          "application/xlsx": components["schemas"]["Document"];
        };
      };
    };
  };
  documents_destroy: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this document. */
        id: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  emails_list: {
    parameters: {
      query: {
        /** account */
        account?: string;
        /** The pagination cursor value. */
        cursor?: number;
        format?: "json" | "xlsx";
        /** id */
        id?: string;
        /** Which field to use when ordering the results. */
        ordering?: string;
        /** Number of results to return per page. */
        page_size?: number;
        /** A search term. */
        search?: string;
        /** state */
        state?: "queued" | "over_quota" | "sent" | "failed" | "received";
        /** state__in */
        state__in?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedEmailList"];
          "application/xlsx": components["schemas"]["PaginatedEmailList"];
        };
      };
    };
  };
  emails_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Email"];
          "application/xlsx": components["schemas"]["Email"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Email"];
        "application/x-www-form-urlencoded": components["schemas"]["Email"];
        "multipart/form-data": components["schemas"]["Email"];
      };
    };
  };
  emails_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this email. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Email"];
          "application/xlsx": components["schemas"]["Email"];
        };
      };
    };
  };
  emails_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this email. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Email"];
          "application/xlsx": components["schemas"]["Email"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Email"];
        "application/x-www-form-urlencoded": components["schemas"]["Email"];
        "multipart/form-data": components["schemas"]["Email"];
      };
    };
  };
  emails_destroy: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this email. */
        id: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  emails_partial_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this email. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Email"];
          "application/xlsx": components["schemas"]["Email"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedEmail"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedEmail"];
        "multipart/form-data": components["schemas"]["PatchedEmail"];
      };
    };
  };
  emails_resend_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this email. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Email"];
          "application/xlsx": components["schemas"]["Email"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Email"];
        "application/x-www-form-urlencoded": components["schemas"]["Email"];
        "multipart/form-data": components["schemas"]["Email"];
      };
    };
  };
  exports_list: {
    parameters: {
      query: {
        /** account */
        account?: string;
        /** The pagination cursor value. */
        cursor?: number;
        format?: "json" | "xlsx";
        /** Number of results to return per page. */
        page_size?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedExportList"];
          "application/xlsx": components["schemas"]["PaginatedExportList"];
        };
      };
    };
  };
  exports_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Export"];
          "application/xlsx": components["schemas"]["Export"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Export"];
        "application/x-www-form-urlencoded": components["schemas"]["Export"];
        "multipart/form-data": components["schemas"]["Export"];
      };
    };
  };
  exports_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this export. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Export"];
          "application/xlsx": components["schemas"]["Export"];
        };
      };
    };
  };
  exports_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this export. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Export"];
          "application/xlsx": components["schemas"]["Export"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Export"];
        "application/x-www-form-urlencoded": components["schemas"]["Export"];
        "multipart/form-data": components["schemas"]["Export"];
      };
    };
  };
  exports_destroy: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this export. */
        id: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  exports_partial_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this export. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Export"];
          "application/xlsx": components["schemas"]["Export"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedExport"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedExport"];
        "multipart/form-data": components["schemas"]["PatchedExport"];
      };
    };
  };
  file_uploads_list: {
    parameters: {
      query: {
        /** The pagination cursor value. */
        cursor?: number;
        format?: "json" | "xlsx";
        /** Which field to use when ordering the results. */
        ordering?: string;
        /** Number of results to return per page. */
        page_size?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedS3FileUploadList"];
          "application/xlsx": components["schemas"]["PaginatedS3FileUploadList"];
        };
      };
    };
  };
  file_uploads_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["S3FileUpload"];
          "application/xlsx": components["schemas"]["S3FileUpload"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["S3FileUpload"];
        "application/x-www-form-urlencoded": components["schemas"]["S3FileUpload"];
        "multipart/form-data": components["schemas"]["S3FileUpload"];
      };
    };
  };
  file_uploads_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this file upload. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["S3FileUpload"];
          "application/xlsx": components["schemas"]["S3FileUpload"];
        };
      };
    };
  };
  formrules_list: {
    parameters: {
      query: {
        /** account */
        account?: string;
        /** The pagination cursor value. */
        cursor?: number;
        format?: "json" | "xlsx";
        /** Number of results to return per page. */
        page_size?: number;
        /** A search term. */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedFormRuleList"];
          "application/xlsx": components["schemas"]["PaginatedFormRuleList"];
        };
      };
    };
  };
  formrules_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["FormRule"];
          "application/xlsx": components["schemas"]["FormRule"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FormRule"];
        "application/x-www-form-urlencoded": components["schemas"]["FormRule"];
        "multipart/form-data": components["schemas"]["FormRule"];
      };
    };
  };
  formrules_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this form rule. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FormRule"];
          "application/xlsx": components["schemas"]["FormRule"];
        };
      };
    };
  };
  formrules_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this form rule. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FormRule"];
          "application/xlsx": components["schemas"]["FormRule"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FormRule"];
        "application/x-www-form-urlencoded": components["schemas"]["FormRule"];
        "multipart/form-data": components["schemas"]["FormRule"];
      };
    };
  };
  formrules_destroy: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this form rule. */
        id: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  formrules_partial_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this form rule. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FormRule"];
          "application/xlsx": components["schemas"]["FormRule"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedFormRule"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedFormRule"];
        "multipart/form-data": components["schemas"]["PatchedFormRule"];
      };
    };
  };
  integrations_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["IntegrationRequest"];
          "application/xlsx": components["schemas"]["IntegrationRequest"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IntegrationRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["IntegrationRequest"];
        "multipart/form-data": components["schemas"]["IntegrationRequest"];
      };
    };
  };
  metafields_list: {
    parameters: {
      query: {
        /** account */
        account?: string;
        /** The pagination cursor value. */
        cursor?: number;
        format?: "json" | "xlsx";
        /** is_editable */
        is_editable?: string;
        /** is_editable_assignee */
        is_editable_assignee?: string;
        /** is_persistent */
        is_persistent?: string;
        /** is_required */
        is_required?: string;
        /** is_searchable */
        is_searchable?: string;
        /** key */
        key?: string;
        /** label */
        label?: string;
        /** namespace */
        namespace?: string;
        /** Which field to use when ordering the results. */
        ordering?: string;
        /** Number of results to return per page. */
        page_size?: number;
        /** A search term. */
        search?: string;
        /** show_in_detail_view */
        show_in_detail_view?: string;
        /** show_in_list_view */
        show_in_list_view?: string;
        /** show_in_mobile_app */
        show_in_mobile_app?: string;
        /** show_in_pod */
        show_in_pod?: string;
        /** show_when_task_type_assignment */
        show_when_task_type_assignment?: string;
        /** show_when_task_type_drop_off */
        show_when_task_type_drop_off?: string;
        /** show_when_task_type_pick_up */
        show_when_task_type_pick_up?: string;
        /** value_type */
        value_type?: "string" | "integer" | "decimal" | "choice";
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedMetafieldList"];
          "application/xlsx": components["schemas"]["PaginatedMetafieldList"];
        };
      };
    };
  };
  metafields_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Metafield"];
          "application/xlsx": components["schemas"]["Metafield"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Metafield"];
        "application/x-www-form-urlencoded": components["schemas"]["Metafield"];
        "multipart/form-data": components["schemas"]["Metafield"];
      };
    };
  };
  metafields_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this metafield. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Metafield"];
          "application/xlsx": components["schemas"]["Metafield"];
        };
      };
    };
  };
  metafields_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this metafield. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Metafield"];
          "application/xlsx": components["schemas"]["Metafield"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Metafield"];
        "application/x-www-form-urlencoded": components["schemas"]["Metafield"];
        "multipart/form-data": components["schemas"]["Metafield"];
      };
    };
  };
  metafields_destroy: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this metafield. */
        id: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  metafields_partial_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this metafield. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Metafield"];
          "application/xlsx": components["schemas"]["Metafield"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedMetafield"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedMetafield"];
        "multipart/form-data": components["schemas"]["PatchedMetafield"];
      };
    };
  };
  notification_templates_list: {
    parameters: {
      query: {
        /** account */
        account?: string;
        /** The pagination cursor value. */
        cursor?: number;
        /** event */
        event?:
          | "create"
          | "assign"
          | "unassign"
          | "reject"
          | "accept"
          | "unaccept"
          | "transit"
          | "activate"
          | "complete"
          | "fail"
          | "cancel"
          | "assignee_near"
          | "assignee_away"
          | "updated";
        format?: "json" | "xlsx";
        /** is_active */
        is_active?: string;
        /** name */
        name?: string;
        /** Which field to use when ordering the results. */
        ordering?: string;
        /** Number of results to return per page. */
        page_size?: number;
        /** recipient */
        recipient?: "account" | "assignee" | "orderer" | "contact" | "client";
        /** A search term. */
        search?: string;
        /** via_app */
        via_app?: string;
        /** via_email */
        via_email?: string;
        /** via_sms */
        via_sms?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedNotificationTemplateList"];
          "application/xlsx": components["schemas"]["PaginatedNotificationTemplateList"];
        };
      };
    };
  };
  notification_templates_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["NotificationTemplate"];
          "application/xlsx": components["schemas"]["NotificationTemplate"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NotificationTemplate"];
        "application/x-www-form-urlencoded": components["schemas"]["NotificationTemplate"];
        "multipart/form-data": components["schemas"]["NotificationTemplate"];
      };
    };
  };
  notification_templates_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this notification template. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["NotificationTemplate"];
          "application/xlsx": components["schemas"]["NotificationTemplate"];
        };
      };
    };
  };
  notification_templates_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this notification template. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["NotificationTemplate"];
          "application/xlsx": components["schemas"]["NotificationTemplate"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NotificationTemplate"];
        "application/x-www-form-urlencoded": components["schemas"]["NotificationTemplate"];
        "multipart/form-data": components["schemas"]["NotificationTemplate"];
      };
    };
  };
  notification_templates_destroy: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this notification template. */
        id: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  notification_templates_partial_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this notification template. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["NotificationTemplate"];
          "application/xlsx": components["schemas"]["NotificationTemplate"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedNotificationTemplate"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedNotificationTemplate"];
        "multipart/form-data": components["schemas"]["PatchedNotificationTemplate"];
      };
    };
  };
  notification_templates_render_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this notification template. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RenderRequest"];
          "application/xlsx": components["schemas"]["RenderRequest"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RenderRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["RenderRequest"];
        "multipart/form-data": components["schemas"]["RenderRequest"];
      };
    };
  };
  notifications_list: {
    parameters: {
      query: {
        /** account */
        account?: string;
        /** The pagination cursor value. */
        cursor?: number;
        /** event */
        event?:
          | "create"
          | "assign"
          | "unassign"
          | "reject"
          | "accept"
          | "unaccept"
          | "transit"
          | "activate"
          | "complete"
          | "fail"
          | "cancel"
          | "assignee_near"
          | "assignee_away"
          | "updated";
        format?: "json" | "xlsx";
        /** Which field to use when ordering the results. */
        ordering?: string;
        /** Number of results to return per page. */
        page_size?: number;
        /** recipient */
        recipient?: "account" | "assignee" | "orderer" | "contact" | "client";
        /** A search term. */
        search?: string;
        /** task */
        task?: string;
        /** via_app */
        via_app?: string;
        /** via_email */
        via_email?: string;
        /** via_sms */
        via_sms?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedNotificationList"];
          "application/xlsx": components["schemas"]["PaginatedNotificationList"];
        };
      };
    };
  };
  notifications_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Notification"];
          "application/xlsx": components["schemas"]["Notification"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Notification"];
        "application/x-www-form-urlencoded": components["schemas"]["Notification"];
        "multipart/form-data": components["schemas"]["Notification"];
      };
    };
  };
  notifications_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this notification. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Notification"];
          "application/xlsx": components["schemas"]["Notification"];
        };
      };
    };
  };
  orders_list: {
    parameters: {
      query: {
        /** account */
        account?: string;
        /** The pagination cursor value. */
        cursor?: number;
        /** external_id */
        external_id?: string;
        /** id */
        id?: string;
        /** Which field to use when ordering the results. */
        ordering?: string;
        /** Number of results to return per page. */
        page_size?: number;
        /** reference */
        reference?: string;
        /** A search term. */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedOrderSerializerV2List"];
        };
      };
    };
  };
  orders_create: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["OrderSerializerV2"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrderSerializerV2"];
        "application/x-www-form-urlencoded": components["schemas"]["OrderSerializerV2"];
        "multipart/form-data": components["schemas"]["OrderSerializerV2"];
      };
    };
  };
  orders_retrieve: {
    parameters: {
      path: {
        /** A UUID string identifying this order. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["OrderSerializerV2"];
        };
      };
    };
  };
  orders_update: {
    parameters: {
      path: {
        /** A UUID string identifying this order. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["OrderSerializerV2"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrderSerializerV2"];
        "application/x-www-form-urlencoded": components["schemas"]["OrderSerializerV2"];
        "multipart/form-data": components["schemas"]["OrderSerializerV2"];
      };
    };
  };
  orders_partial_update: {
    parameters: {
      path: {
        /** A UUID string identifying this order. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["OrderSerializerV2"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedOrderSerializerV2"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedOrderSerializerV2"];
        "multipart/form-data": components["schemas"]["PatchedOrderSerializerV2"];
      };
    };
  };
  password_change_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["PasswordChange"];
          "application/xlsx": components["schemas"]["PasswordChange"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PasswordChange"];
        "application/x-www-form-urlencoded": components["schemas"]["PasswordChange"];
        "multipart/form-data": components["schemas"]["PasswordChange"];
      };
    };
  };
  password_reset_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["PasswordReset"];
          "application/xlsx": components["schemas"]["PasswordReset"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PasswordReset"];
        "application/x-www-form-urlencoded": components["schemas"]["PasswordReset"];
        "multipart/form-data": components["schemas"]["PasswordReset"];
      };
    };
  };
  password_reset_confirm_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["PasswordResetConfirm"];
          "application/xlsx": components["schemas"]["PasswordResetConfirm"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PasswordResetConfirm"];
        "application/x-www-form-urlencoded": components["schemas"]["PasswordResetConfirm"];
        "multipart/form-data": components["schemas"]["PasswordResetConfirm"];
      };
    };
  };
  push_notifications_list: {
    parameters: {
      query: {
        /** account */
        account?: string;
        /** The pagination cursor value. */
        cursor?: number;
        format?: "json" | "xlsx";
        /** id */
        id?: string;
        /** Which field to use when ordering the results. */
        ordering?: string;
        /** Number of results to return per page. */
        page_size?: number;
        /** A search term. */
        search?: string;
        /** state */
        state?: "queued" | "pending" | "failed" | "sent";
        /** state__in */
        state__in?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedPushNotificationList"];
          "application/xlsx": components["schemas"]["PaginatedPushNotificationList"];
        };
      };
    };
  };
  push_notifications_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["PushNotification"];
          "application/xlsx": components["schemas"]["PushNotification"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PushNotification"];
        "application/x-www-form-urlencoded": components["schemas"]["PushNotification"];
        "multipart/form-data": components["schemas"]["PushNotification"];
      };
    };
  };
  push_notifications_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this push notification. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PushNotification"];
          "application/xlsx": components["schemas"]["PushNotification"];
        };
      };
    };
  };
  push_notifications_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this push notification. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PushNotification"];
          "application/xlsx": components["schemas"]["PushNotification"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PushNotification"];
        "application/x-www-form-urlencoded": components["schemas"]["PushNotification"];
        "multipart/form-data": components["schemas"]["PushNotification"];
      };
    };
  };
  push_notifications_destroy: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this push notification. */
        id: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  push_notifications_partial_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this push notification. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PushNotification"];
          "application/xlsx": components["schemas"]["PushNotification"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedPushNotification"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPushNotification"];
        "multipart/form-data": components["schemas"]["PatchedPushNotification"];
      };
    };
  };
  push_notifications_resend_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this push notification. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PushNotification"];
          "application/xlsx": components["schemas"]["PushNotification"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PushNotification"];
        "application/x-www-form-urlencoded": components["schemas"]["PushNotification"];
        "multipart/form-data": components["schemas"]["PushNotification"];
      };
    };
  };
  recurrences_list: {
    parameters: {
      query: {
        /** account */
        account?: string;
        /** The pagination cursor value. */
        cursor?: number;
        /** order */
        order?: string;
        /** Number of results to return per page. */
        page_size?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedRecurrenceList"];
        };
      };
    };
  };
  recurrences_create: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Recurrence"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Recurrence"];
        "application/x-www-form-urlencoded": components["schemas"]["Recurrence"];
        "multipart/form-data": components["schemas"]["Recurrence"];
      };
    };
  };
  recurrences_retrieve: {
    parameters: {
      path: {
        /** A UUID string identifying this recurrence. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Recurrence"];
        };
      };
    };
  };
  recurrences_update: {
    parameters: {
      path: {
        /** A UUID string identifying this recurrence. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Recurrence"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Recurrence"];
        "application/x-www-form-urlencoded": components["schemas"]["Recurrence"];
        "multipart/form-data": components["schemas"]["Recurrence"];
      };
    };
  };
  recurrences_partial_update: {
    parameters: {
      path: {
        /** A UUID string identifying this recurrence. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Recurrence"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedRecurrence"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedRecurrence"];
        "multipart/form-data": components["schemas"]["PatchedRecurrence"];
      };
    };
  };
  register_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Registration"];
          "application/xlsx": components["schemas"]["Registration"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Registration"];
        "application/x-www-form-urlencoded": components["schemas"]["Registration"];
        "multipart/form-data": components["schemas"]["Registration"];
      };
    };
  };
  route_optimizations_list: {
    parameters: {
      query: {
        /** account */
        account?: string;
        /** The pagination cursor value. */
        cursor?: number;
        format?: "json" | "xml";
        /** id */
        id?: string;
        /** Which field to use when ordering the results. */
        ordering?: string;
        /** Number of results to return per page. */
        page_size?: number;
        /** state */
        state?:
          | "pending"
          | "started"
          | "ready"
          | "completed"
          | "over_quota"
          | "failed";
        /** state__in */
        state__in?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedRouteOptimizationSerializerV2List"];
          "application/xml": components["schemas"]["PaginatedRouteOptimizationSerializerV2List"];
        };
      };
    };
  };
  route_optimizations_create: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["RouteOptimizationSerializerV2"];
          "application/xml": components["schemas"]["RouteOptimizationSerializerV2"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RouteOptimizationSerializerV2"];
        "application/xml": components["schemas"]["RouteOptimizationSerializerV2"];
      };
    };
  };
  route_optimizations_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
      path: {
        /** A UUID string identifying this route optimization. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RouteOptimizationSerializerV2"];
          "application/xml": components["schemas"]["RouteOptimizationSerializerV2"];
        };
      };
    };
  };
  route_optimizations_commit_create: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
      path: {
        /** A UUID string identifying this route optimization. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RouteOptimizationSerializerV2"];
          "application/xml": components["schemas"]["RouteOptimizationSerializerV2"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RouteOptimizationSerializerV2"];
        "application/xml": components["schemas"]["RouteOptimizationSerializerV2"];
      };
    };
  };
  route_optimizations_results_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
      path: {
        /** A UUID string identifying this route optimization. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RouteOptimizationSerializerV2"];
          "application/xml": components["schemas"]["RouteOptimizationSerializerV2"];
        };
      };
    };
  };
  route_optimizations_routes_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
      path: {
        /** A UUID string identifying this route optimization. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RouteOptimizationSerializerV2"];
          "application/xml": components["schemas"]["RouteOptimizationSerializerV2"];
        };
      };
    };
  };
  route_optimizations_routes_create: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
      path: {
        /** A UUID string identifying this route optimization. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RouteOptimizationSerializerV2"];
          "application/xml": components["schemas"]["RouteOptimizationSerializerV2"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RouteOptimizationSerializerV2"];
        "application/xml": components["schemas"]["RouteOptimizationSerializerV2"];
      };
    };
  };
  route_optimizations_schedule_create: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
      path: {
        /** A UUID string identifying this route optimization. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RouteOptimizationSerializerV2"];
          "application/xml": components["schemas"]["RouteOptimizationSerializerV2"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RouteOptimizationSerializerV2"];
        "application/xml": components["schemas"]["RouteOptimizationSerializerV2"];
      };
    };
  };
  routes_list: {
    parameters: {
      query: {
        /** account */
        account?: string;
        /** assignee */
        assignee?: string;
        /** code */
        code?: string;
        /** The pagination cursor value. */
        cursor?: number;
        /** Which field to use when ordering the results. */
        ordering?: string;
        /** Number of results to return per page. */
        page_size?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedRouteList"];
        };
      };
    };
  };
  routes_create: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Route"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Route"];
        "application/x-www-form-urlencoded": components["schemas"]["Route"];
        "multipart/form-data": components["schemas"]["Route"];
      };
    };
  };
  routes_retrieve: {
    parameters: {
      path: {
        /** A UUID string identifying this route. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Route"];
        };
      };
    };
  };
  routes_update: {
    parameters: {
      path: {
        /** A UUID string identifying this route. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Route"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Route"];
        "application/x-www-form-urlencoded": components["schemas"]["Route"];
        "multipart/form-data": components["schemas"]["Route"];
      };
    };
  };
  routes_destroy: {
    parameters: {
      path: {
        /** A UUID string identifying this route. */
        id: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  routes_partial_update: {
    parameters: {
      path: {
        /** A UUID string identifying this route. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Route"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedRoute"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedRoute"];
        "multipart/form-data": components["schemas"]["PatchedRoute"];
      };
    };
  };
  scenes_dashboard_list: {
    parameters: {
      query: {
        /** The pagination cursor value. */
        cursor?: number;
        format?: "json" | "xml";
        /** Which field to use when ordering the results. */
        ordering?: string;
        /** Number of results to return per page. */
        page_size?: number;
        /** A search term. */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedDashboardSceneList"];
          "application/xml": components["schemas"]["PaginatedDashboardSceneList"];
        };
      };
    };
  };
  scenes_order_list_list: {
    parameters: {
      query: {
        /** account */
        account?: string;
        /** The pagination cursor value. */
        cursor?: number;
        /** external_id */
        external_id?: string;
        /** id */
        id?: string;
        /** Which field to use when ordering the results. */
        ordering?: string;
        /** Number of results to return per page. */
        page_size?: number;
        /** reference */
        reference?: string;
        /** A search term. */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedOrderListSceneList"];
        };
      };
    };
  };
  scenes_recurrence_list_list: {
    parameters: {
      query: {
        /** account */
        account?: string;
        /** The pagination cursor value. */
        cursor?: number;
        /** order */
        order?: string;
        /** Number of results to return per page. */
        page_size?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedRecurrenceListSceneList"];
        };
      };
    };
  };
  scenes_task_list_list: {
    parameters: {
      query: {
        /** address__apartment_number */
        address__apartment_number?: string;
        /** address__apartment_number__icontains */
        address__apartment_number__icontains?: string;
        /** address__apartment_number__in */
        address__apartment_number__in?: string;
        /** address__apartment_number__iregex */
        address__apartment_number__iregex?: string;
        /** address__apartment_number__istartswith */
        address__apartment_number__istartswith?: string;
        /** address__apartment_number__search */
        address__apartment_number__search?: string;
        /** address__city */
        address__city?: string;
        /** address__city__icontains */
        address__city__icontains?: string;
        /** address__city__in */
        address__city__in?: string;
        /** address__city__iregex */
        address__city__iregex?: string;
        /** address__city__istartswith */
        address__city__istartswith?: string;
        /** address__city__search */
        address__city__search?: string;
        /** address__country */
        address__country?: string;
        /** address__country__icontains */
        address__country__icontains?: string;
        /** address__country__in */
        address__country__in?: string;
        /** address__country__iregex */
        address__country__iregex?: string;
        /** address__country__istartswith */
        address__country__istartswith?: string;
        /** address__country__search */
        address__country__search?: string;
        /** address__country_code */
        address__country_code?: string;
        /** address__country_code__icontains */
        address__country_code__icontains?: string;
        /** address__country_code__in */
        address__country_code__in?: string;
        /** address__country_code__iregex */
        address__country_code__iregex?: string;
        /** address__country_code__istartswith */
        address__country_code__istartswith?: string;
        /** address__country_code__search */
        address__country_code__search?: string;
        /** address__formatted_address */
        address__formatted_address?: string;
        /** address__formatted_address__icontains */
        address__formatted_address__icontains?: string;
        /** address__formatted_address__in */
        address__formatted_address__in?: string;
        /** address__formatted_address__iregex */
        address__formatted_address__iregex?: string;
        /** address__formatted_address__istartswith */
        address__formatted_address__istartswith?: string;
        /** address__formatted_address__search */
        address__formatted_address__search?: string;
        /** address__google_place_id */
        address__google_place_id?: string;
        /** address__google_place_id__icontains */
        address__google_place_id__icontains?: string;
        /** address__google_place_id__in */
        address__google_place_id__in?: string;
        /** address__google_place_id__iregex */
        address__google_place_id__iregex?: string;
        /** address__google_place_id__istartswith */
        address__google_place_id__istartswith?: string;
        /** address__google_place_id__search */
        address__google_place_id__search?: string;
        /** address__house_number */
        address__house_number?: string;
        /** address__house_number__icontains */
        address__house_number__icontains?: string;
        /** address__house_number__in */
        address__house_number__in?: string;
        /** address__house_number__iregex */
        address__house_number__iregex?: string;
        /** address__house_number__istartswith */
        address__house_number__istartswith?: string;
        /** address__house_number__search */
        address__house_number__search?: string;
        /** address__point_of_interest */
        address__point_of_interest?: string;
        /** address__point_of_interest__icontains */
        address__point_of_interest__icontains?: string;
        /** address__point_of_interest__in */
        address__point_of_interest__in?: string;
        /** address__point_of_interest__iregex */
        address__point_of_interest__iregex?: string;
        /** address__point_of_interest__istartswith */
        address__point_of_interest__istartswith?: string;
        /** address__point_of_interest__search */
        address__point_of_interest__search?: string;
        /** address__postal_code */
        address__postal_code?: string;
        /** address__postal_code__icontains */
        address__postal_code__icontains?: string;
        /** address__postal_code__in */
        address__postal_code__in?: string;
        /** address__postal_code__iregex */
        address__postal_code__iregex?: string;
        /** address__postal_code__istartswith */
        address__postal_code__istartswith?: string;
        /** address__postal_code__search */
        address__postal_code__search?: string;
        /** address__raw_address */
        address__raw_address?: string;
        /** address__raw_address__icontains */
        address__raw_address__icontains?: string;
        /** address__raw_address__in */
        address__raw_address__in?: string;
        /** address__raw_address__iregex */
        address__raw_address__iregex?: string;
        /** address__raw_address__istartswith */
        address__raw_address__istartswith?: string;
        /** address__raw_address__search */
        address__raw_address__search?: string;
        /** address__state */
        address__state?: string;
        /** address__state__icontains */
        address__state__icontains?: string;
        /** address__state__in */
        address__state__in?: string;
        /** address__state__iregex */
        address__state__iregex?: string;
        /** address__state__istartswith */
        address__state__istartswith?: string;
        /** address__state__search */
        address__state__search?: string;
        /** address__street */
        address__street?: string;
        /** address__street__icontains */
        address__street__icontains?: string;
        /** address__street__in */
        address__street__in?: string;
        /** address__street__iregex */
        address__street__iregex?: string;
        /** address__street__istartswith */
        address__street__istartswith?: string;
        /** address__street__search */
        address__street__search?: string;
        /** address_id */
        address_id?: string;
        /** address_id__in */
        address_id__in?: string;
        /** address_id__isnull */
        address_id__isnull?: string;
        /** assignee__email */
        assignee__email?: string;
        /** assignee__email__icontains */
        assignee__email__icontains?: string;
        /** assignee__email__iregex */
        assignee__email__iregex?: string;
        /** assignee__email__isnull */
        assignee__email__isnull?: string;
        /** assignee__email__istartswith */
        assignee__email__istartswith?: string;
        /** assignee__email__search */
        assignee__email__search?: string;
        /** assignee__first_name */
        assignee__first_name?: string;
        /** assignee__first_name__icontains */
        assignee__first_name__icontains?: string;
        /** assignee__first_name__iregex */
        assignee__first_name__iregex?: string;
        /** assignee__first_name__isnull */
        assignee__first_name__isnull?: string;
        /** assignee__first_name__istartswith */
        assignee__first_name__istartswith?: string;
        /** assignee__first_name__search */
        assignee__first_name__search?: string;
        /** assignee__last_name */
        assignee__last_name?: string;
        /** assignee__last_name__icontains */
        assignee__last_name__icontains?: string;
        /** assignee__last_name__iregex */
        assignee__last_name__iregex?: string;
        /** assignee__last_name__isnull */
        assignee__last_name__isnull?: string;
        /** assignee__last_name__istartswith */
        assignee__last_name__istartswith?: string;
        /** assignee__last_name__search */
        assignee__last_name__search?: string;
        /** assignee__phone */
        assignee__phone?: string;
        /** assignee__phone__icontains */
        assignee__phone__icontains?: string;
        /** assignee__phone__iregex */
        assignee__phone__iregex?: string;
        /** assignee__phone__isnull */
        assignee__phone__isnull?: string;
        /** assignee__phone__istartswith */
        assignee__phone__istartswith?: string;
        /** assignee__phone__search */
        assignee__phone__search?: string;
        /** assignee_id */
        assignee_id?: string;
        /** assignee_id__in */
        assignee_id__in?: string;
        /** assignee_id__isnull */
        assignee_id__isnull?: string;
        /** assignee_proximity */
        assignee_proximity?: "away" | "near";
        /** assignee_proximity__in */
        assignee_proximity__in?: string;
        /** category */
        category?: "assignment" | "pick_up" | "drop_off" | "warehouse";
        /** category__in */
        category__in?: string;
        /** contact__company__icontains */
        contact__company__icontains?: string;
        /** contact__company__in */
        contact__company__in?: string;
        /** contact__company__iregex */
        contact__company__iregex?: string;
        /** contact__company__istartswith */
        contact__company__istartswith?: string;
        /** contact__company__search */
        contact__company__search?: string;
        /** contact__email */
        contact__email?: string;
        /** contact__email__icontains */
        contact__email__icontains?: string;
        /** contact__email__in */
        contact__email__in?: string;
        /** contact__email__iregex */
        contact__email__iregex?: string;
        /** contact__email__istartswith */
        contact__email__istartswith?: string;
        /** contact__email__search */
        contact__email__search?: string;
        /** contact__name */
        contact__name?: string;
        /** contact__name__icontains */
        contact__name__icontains?: string;
        /** contact__name__in */
        contact__name__in?: string;
        /** contact__name__iregex */
        contact__name__iregex?: string;
        /** contact__name__istartswith */
        contact__name__istartswith?: string;
        /** contact__name__search */
        contact__name__search?: string;
        /** contact__notes */
        contact__notes?: string;
        /** contact__notes__icontains */
        contact__notes__icontains?: string;
        /** contact__notes__in */
        contact__notes__in?: string;
        /** contact__notes__iregex */
        contact__notes__iregex?: string;
        /** contact__notes__istartswith */
        contact__notes__istartswith?: string;
        /** contact__notes__search */
        contact__notes__search?: string;
        /** contact__phone */
        contact__phone?: string;
        /** contact__phone__icontains */
        contact__phone__icontains?: string;
        /** contact__phone__in */
        contact__phone__in?: string;
        /** contact__phone__iregex */
        contact__phone__iregex?: string;
        /** contact__phone__istartswith */
        contact__phone__istartswith?: string;
        /** contact__phone__search */
        contact__phone__search?: string;
        /** contact_id */
        contact_id?: string;
        /** contact_id__in */
        contact_id__in?: string;
        /** contact_id__isnull */
        contact_id__isnull?: string;
        /** created_by */
        created_by?: string;
        /** created_by__in */
        created_by__in?: string;
        /** created_by__isnull */
        created_by__isnull?: string;
        /** The pagination cursor value. */
        cursor?: number;
        /** description */
        description?: string;
        /** description__icontains */
        description__icontains?: string;
        /** description__iregex */
        description__iregex?: string;
        /** description__istartswith */
        description__istartswith?: string;
        /** description__search */
        description__search?: string;
        /** duration */
        duration?: string;
        /** duration__gt */
        duration__gt?: string;
        /** duration__gte */
        duration__gte?: string;
        /** duration__lt */
        duration__lt?: string;
        /** duration__lte */
        duration__lte?: string;
        /** external_id */
        external_id?: string;
        /** external_id__icontains */
        external_id__icontains?: string;
        /** external_id__in */
        external_id__in?: string;
        /** external_id__iregex */
        external_id__iregex?: string;
        /** external_id__isnull */
        external_id__isnull?: string;
        /** external_id__istartswith */
        external_id__istartswith?: string;
        /** external_id__search */
        external_id__search?: string;
        format?: "json" | "xml";
        /** id */
        id?: string;
        /** id__in */
        id__in?: string;
        /** is_optimal */
        is_optimal?: string;
        /** is_optimal__isnull */
        is_optimal__isnull?: string;
        /** metadata__accepted_distance */
        metadata__accepted_distance?: string;
        /** metadata__accepted_distance__gt */
        metadata__accepted_distance__gt?: string;
        /** metadata__accepted_distance__gte */
        metadata__accepted_distance__gte?: string;
        /** metadata__accepted_distance__lt */
        metadata__accepted_distance__lt?: string;
        /** metadata__accepted_distance__lte */
        metadata__accepted_distance__lte?: string;
        /** metadata__accepted_duration */
        metadata__accepted_duration?: string;
        /** metadata__accepted_duration__gt */
        metadata__accepted_duration__gt?: string;
        /** metadata__accepted_duration__gte */
        metadata__accepted_duration__gte?: string;
        /** metadata__accepted_duration__lt */
        metadata__accepted_duration__lt?: string;
        /** metadata__accepted_duration__lte */
        metadata__accepted_duration__lte?: string;
        /** metadata__active_distance */
        metadata__active_distance?: string;
        /** metadata__active_distance__gt */
        metadata__active_distance__gt?: string;
        /** metadata__active_distance__gte */
        metadata__active_distance__gte?: string;
        /** metadata__active_distance__lt */
        metadata__active_distance__lt?: string;
        /** metadata__active_distance__lte */
        metadata__active_distance__lte?: string;
        /** metadata__active_duration */
        metadata__active_duration?: string;
        /** metadata__active_duration__gt */
        metadata__active_duration__gt?: string;
        /** metadata__active_duration__gte */
        metadata__active_duration__gte?: string;
        /** metadata__active_duration__lt */
        metadata__active_duration__lt?: string;
        /** metadata__active_duration__lte */
        metadata__active_duration__lte?: string;
        /** metadata__assigned_distance */
        metadata__assigned_distance?: string;
        /** metadata__assigned_distance__gt */
        metadata__assigned_distance__gt?: string;
        /** metadata__assigned_distance__gte */
        metadata__assigned_distance__gte?: string;
        /** metadata__assigned_distance__lt */
        metadata__assigned_distance__lt?: string;
        /** metadata__assigned_distance__lte */
        metadata__assigned_distance__lte?: string;
        /** metadata__assigned_duration */
        metadata__assigned_duration?: string;
        /** metadata__assigned_duration__gt */
        metadata__assigned_duration__gt?: string;
        /** metadata__assigned_duration__gte */
        metadata__assigned_duration__gte?: string;
        /** metadata__assigned_duration__lt */
        metadata__assigned_duration__lt?: string;
        /** metadata__assigned_duration__lte */
        metadata__assigned_duration__lte?: string;
        /** metadata__cancelled_distance */
        metadata__cancelled_distance?: string;
        /** metadata__cancelled_distance__gt */
        metadata__cancelled_distance__gt?: string;
        /** metadata__cancelled_distance__gte */
        metadata__cancelled_distance__gte?: string;
        /** metadata__cancelled_distance__lt */
        metadata__cancelled_distance__lt?: string;
        /** metadata__cancelled_distance__lte */
        metadata__cancelled_distance__lte?: string;
        /** metadata__cancelled_duration */
        metadata__cancelled_duration?: string;
        /** metadata__cancelled_duration__gt */
        metadata__cancelled_duration__gt?: string;
        /** metadata__cancelled_duration__gte */
        metadata__cancelled_duration__gte?: string;
        /** metadata__cancelled_duration__lt */
        metadata__cancelled_duration__lt?: string;
        /** metadata__cancelled_duration__lte */
        metadata__cancelled_duration__lte?: string;
        /** metadata__completed_distance */
        metadata__completed_distance?: string;
        /** metadata__completed_distance__gt */
        metadata__completed_distance__gt?: string;
        /** metadata__completed_distance__gte */
        metadata__completed_distance__gte?: string;
        /** metadata__completed_distance__lt */
        metadata__completed_distance__lt?: string;
        /** metadata__completed_distance__lte */
        metadata__completed_distance__lte?: string;
        /** metadata__completed_duration */
        metadata__completed_duration?: string;
        /** metadata__completed_duration__gt */
        metadata__completed_duration__gt?: string;
        /** metadata__completed_duration__gte */
        metadata__completed_duration__gte?: string;
        /** metadata__completed_duration__lt */
        metadata__completed_duration__lt?: string;
        /** metadata__completed_duration__lte */
        metadata__completed_duration__lte?: string;
        /** metadata__documents_count */
        metadata__documents_count?: string;
        /** metadata__documents_count__gt */
        metadata__documents_count__gt?: string;
        /** metadata__documents_count__gte */
        metadata__documents_count__gte?: string;
        /** metadata__documents_count__lt */
        metadata__documents_count__lt?: string;
        /** metadata__documents_count__lte */
        metadata__documents_count__lte?: string;
        /** metadata__events_count */
        metadata__events_count?: string;
        /** metadata__events_count__gt */
        metadata__events_count__gt?: string;
        /** metadata__events_count__gte */
        metadata__events_count__gte?: string;
        /** metadata__events_count__lt */
        metadata__events_count__lt?: string;
        /** metadata__events_count__lte */
        metadata__events_count__lte?: string;
        /** metadata__failed_distance */
        metadata__failed_distance?: string;
        /** metadata__failed_distance__gt */
        metadata__failed_distance__gt?: string;
        /** metadata__failed_distance__gte */
        metadata__failed_distance__gte?: string;
        /** metadata__failed_distance__lt */
        metadata__failed_distance__lt?: string;
        /** metadata__failed_distance__lte */
        metadata__failed_distance__lte?: string;
        /** metadata__failed_duration */
        metadata__failed_duration?: string;
        /** metadata__failed_duration__gt */
        metadata__failed_duration__gt?: string;
        /** metadata__failed_duration__gte */
        metadata__failed_duration__gte?: string;
        /** metadata__failed_duration__lt */
        metadata__failed_duration__lt?: string;
        /** metadata__failed_duration__lte */
        metadata__failed_duration__lte?: string;
        /** metadata__forms_completed_count */
        metadata__forms_completed_count?: string;
        /** metadata__forms_completed_count__gt */
        metadata__forms_completed_count__gt?: string;
        /** metadata__forms_completed_count__gte */
        metadata__forms_completed_count__gte?: string;
        /** metadata__forms_completed_count__lt */
        metadata__forms_completed_count__lt?: string;
        /** metadata__forms_completed_count__lte */
        metadata__forms_completed_count__lte?: string;
        /** metadata__forms_count */
        metadata__forms_count?: string;
        /** metadata__forms_count__gt */
        metadata__forms_count__gt?: string;
        /** metadata__forms_count__gte */
        metadata__forms_count__gte?: string;
        /** metadata__forms_count__lt */
        metadata__forms_count__lt?: string;
        /** metadata__forms_count__lte */
        metadata__forms_count__lte?: string;
        /** metadata__signatures_count */
        metadata__signatures_count?: string;
        /** metadata__signatures_count__gt */
        metadata__signatures_count__gt?: string;
        /** metadata__signatures_count__gte */
        metadata__signatures_count__gte?: string;
        /** metadata__signatures_count__lt */
        metadata__signatures_count__lt?: string;
        /** metadata__signatures_count__lte */
        metadata__signatures_count__lte?: string;
        /** metadata__task_event_notes_count */
        metadata__task_event_notes_count?: string;
        /** metadata__task_event_notes_count__gt */
        metadata__task_event_notes_count__gt?: string;
        /** metadata__task_event_notes_count__gte */
        metadata__task_event_notes_count__gte?: string;
        /** metadata__task_event_notes_count__lt */
        metadata__task_event_notes_count__lt?: string;
        /** metadata__task_event_notes_count__lte */
        metadata__task_event_notes_count__lte?: string;
        /** metadata__transit_distance */
        metadata__transit_distance?: string;
        /** metadata__transit_distance__gt */
        metadata__transit_distance__gt?: string;
        /** metadata__transit_distance__gte */
        metadata__transit_distance__gte?: string;
        /** metadata__transit_distance__lt */
        metadata__transit_distance__lt?: string;
        /** metadata__transit_distance__lte */
        metadata__transit_distance__lte?: string;
        /** metadata__transit_duration */
        metadata__transit_duration?: string;
        /** metadata__transit_duration__gt */
        metadata__transit_duration__gt?: string;
        /** metadata__transit_duration__gte */
        metadata__transit_duration__gte?: string;
        /** metadata__transit_duration__lt */
        metadata__transit_duration__lt?: string;
        /** metadata__transit_duration__lte */
        metadata__transit_duration__lte?: string;
        /** metadata__unassigned_distance */
        metadata__unassigned_distance?: string;
        /** metadata__unassigned_distance__gt */
        metadata__unassigned_distance__gt?: string;
        /** metadata__unassigned_distance__gte */
        metadata__unassigned_distance__gte?: string;
        /** metadata__unassigned_distance__lt */
        metadata__unassigned_distance__lt?: string;
        /** metadata__unassigned_distance__lte */
        metadata__unassigned_distance__lte?: string;
        /** metadata__unassigned_duration */
        metadata__unassigned_duration?: string;
        /** metadata__unassigned_duration__gt */
        metadata__unassigned_duration__gt?: string;
        /** metadata__unassigned_duration__gte */
        metadata__unassigned_duration__gte?: string;
        /** metadata__unassigned_duration__lt */
        metadata__unassigned_duration__lt?: string;
        /** metadata__unassigned_duration__lte */
        metadata__unassigned_duration__lte?: string;
        /** order__auto_assign */
        order__auto_assign?: string;
        /** order__created_by */
        order__created_by?: string;
        /** order__created_by__in */
        order__created_by__in?: string;
        /** order__created_by__isnull */
        order__created_by__isnull?: string;
        /** order__external_id */
        order__external_id?: string;
        /** order__external_id__icontains */
        order__external_id__icontains?: string;
        /** order__external_id__in */
        order__external_id__in?: string;
        /** order__external_id__iregex */
        order__external_id__iregex?: string;
        /** order__external_id__isnull */
        order__external_id__isnull?: string;
        /** order__external_id__istartswith */
        order__external_id__istartswith?: string;
        /** order__external_id__search */
        order__external_id__search?: string;
        /** order__reference */
        order__reference?: string;
        /** order__reference__icontains */
        order__reference__icontains?: string;
        /** order__reference__in */
        order__reference__in?: string;
        /** order__reference__iregex */
        order__reference__iregex?: string;
        /** order__reference__istartswith */
        order__reference__istartswith?: string;
        /** order__reference__search */
        order__reference__search?: string;
        /** order_id */
        order_id?: string;
        /** order_id__in */
        order_id__in?: string;
        /** order_id__isnull */
        order_id__isnull?: string;
        /** orderer_id */
        orderer_id?: string;
        /** orderer_id__in */
        orderer_id__in?: string;
        /** orderer_id__isnull */
        orderer_id__isnull?: string;
        /** Which field to use when ordering the results. */
        ordering?: string;
        /** owner_id */
        owner_id?: string;
        /** owner_id__in */
        owner_id__in?: string;
        /** owner_id__isnull */
        owner_id__isnull?: string;
        /** Number of results to return per page. */
        page_size?: number;
        /** priority */
        priority?: string;
        /** priority__gt */
        priority__gt?: string;
        /** priority__gte */
        priority__gte?: string;
        /** priority__in */
        priority__in?: string;
        /** priority__lt */
        priority__lt?: string;
        /** priority__lte */
        priority__lte?: string;
        /** receiver_id */
        receiver_id?: string;
        /** receiver_id__in */
        receiver_id__in?: string;
        /** receiver_id__isnull */
        receiver_id__isnull?: string;
        /** reference */
        reference?: string;
        /** reference__icontains */
        reference__icontains?: string;
        /** reference__in */
        reference__in?: string;
        /** reference__iregex */
        reference__iregex?: string;
        /** reference__istartswith */
        reference__istartswith?: string;
        /** reference__search */
        reference__search?: string;
        /** route_id */
        route_id?: string;
        /** route_id__in */
        route_id__in?: string;
        /** route_id__isnull */
        route_id__isnull?: string;
        /** A search term. */
        search?: string;
        /** state */
        state?:
          | "unassigned"
          | "assigned"
          | "accepted"
          | "transit"
          | "active"
          | "completed"
          | "failed"
          | "cancelled";
        /** state__in */
        state__in?: string;
        /** unassignee_id */
        unassignee_id?: string;
        /** unassignee_id__in */
        unassignee_id__in?: string;
        /** unassignee_id__isnull */
        unassignee_id__isnull?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTaskListSceneList"];
          "application/xml": components["schemas"]["PaginatedTaskListSceneList"];
        };
      };
    };
  };
  signatures_list: {
    parameters: {
      query: {
        /** The pagination cursor value. */
        cursor?: number;
        format?: "json" | "xlsx";
        /** Which field to use when ordering the results. */
        ordering?: string;
        /** Number of results to return per page. */
        page_size?: number;
        /** A search term. */
        search?: string;
        /** task */
        task?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedSignatureList"];
          "application/xlsx": components["schemas"]["PaginatedSignatureList"];
        };
      };
    };
  };
  signatures_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Signature"];
          "application/xlsx": components["schemas"]["Signature"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Signature"];
        "application/x-www-form-urlencoded": components["schemas"]["Signature"];
        "multipart/form-data": components["schemas"]["Signature"];
      };
    };
  };
  signatures_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this signature. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Signature"];
          "application/xlsx": components["schemas"]["Signature"];
        };
      };
    };
  };
  signatures_destroy: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this signature. */
        id: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  sms_list: {
    parameters: {
      query: {
        /** account */
        account?: string;
        /** The pagination cursor value. */
        cursor?: number;
        format?: "json" | "xlsx";
        /** id */
        id?: string;
        /** Which field to use when ordering the results. */
        ordering?: string;
        /** Number of results to return per page. */
        page_size?: number;
        /** A search term. */
        search?: string;
        /** state */
        state?: "queued" | "over_quota" | "sent" | "failed" | "received";
        /** state__in */
        state__in?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedSMSList"];
          "application/xlsx": components["schemas"]["PaginatedSMSList"];
        };
      };
    };
  };
  sms_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SMS"];
          "application/xlsx": components["schemas"]["SMS"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SMS"];
        "application/x-www-form-urlencoded": components["schemas"]["SMS"];
        "multipart/form-data": components["schemas"]["SMS"];
      };
    };
  };
  sms_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this sms. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SMS"];
          "application/xlsx": components["schemas"]["SMS"];
        };
      };
    };
  };
  sms_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this sms. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SMS"];
          "application/xlsx": components["schemas"]["SMS"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SMS"];
        "application/x-www-form-urlencoded": components["schemas"]["SMS"];
        "multipart/form-data": components["schemas"]["SMS"];
      };
    };
  };
  sms_destroy: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this sms. */
        id: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  sms_partial_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this sms. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SMS"];
          "application/xlsx": components["schemas"]["SMS"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedSMS"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedSMS"];
        "multipart/form-data": components["schemas"]["PatchedSMS"];
      };
    };
  };
  sms_resend_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this sms. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SMS"];
          "application/xlsx": components["schemas"]["SMS"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SMS"];
        "application/x-www-form-urlencoded": components["schemas"]["SMS"];
        "multipart/form-data": components["schemas"]["SMS"];
      };
    };
  };
  task_address_features_list: {
    parameters: {
      query: {
        /** account */
        account?: string;
        /** assignee */
        assignee?: string;
        /** category */
        category?: "assignment" | "pick_up" | "drop_off" | "warehouse";
        /** The pagination cursor value. */
        cursor?: number;
        format?: "json" | "xlsx";
        /** owner */
        owner?: string;
        /** Number of results to return per page. */
        page_size?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTaskAddressFeatureList"];
          "application/xlsx": components["schemas"]["PaginatedTaskAddressFeatureList"];
        };
      };
    };
  };
  task_address_features_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this task. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TaskAddressFeature"];
          "application/xlsx": components["schemas"]["TaskAddressFeature"];
        };
      };
    };
  };
  task_commands_list: {
    parameters: {
      query: {
        /** action */
        action?:
          | "update"
          | "reassign"
          | "assign"
          | "accept"
          | "unaccept"
          | "reject"
          | "unassign"
          | "transit"
          | "activate"
          | "complete"
          | "fail"
          | "cancel"
          | "assignee_near"
          | "assignee_away";
        /** assignee */
        assignee?: string;
        /** The pagination cursor value. */
        cursor?: number;
        format?: "json" | "xlsx";
        /** Number of results to return per page. */
        page_size?: number;
        /** state */
        state?: "pending" | "accepted" | "rejected";
        /** task */
        task?: string;
        /** task__account */
        task__account?: string;
        /** time */
        time?: string;
        /** user */
        user?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTaskCommandList"];
          "application/xlsx": components["schemas"]["PaginatedTaskCommandList"];
        };
      };
    };
  };
  task_commands_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["TaskCommand"];
          "application/xlsx": components["schemas"]["TaskCommand"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaskCommand"];
        "application/x-www-form-urlencoded": components["schemas"]["TaskCommand"];
        "multipart/form-data": components["schemas"]["TaskCommand"];
      };
    };
  };
  task_commands_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this task command. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TaskCommand"];
          "application/xlsx": components["schemas"]["TaskCommand"];
        };
      };
    };
  };
  task_commands_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this task command. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TaskCommand"];
          "application/xlsx": components["schemas"]["TaskCommand"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaskCommand"];
        "application/x-www-form-urlencoded": components["schemas"]["TaskCommand"];
        "multipart/form-data": components["schemas"]["TaskCommand"];
      };
    };
  };
  task_event_tracks_list: {
    parameters: {
      query: {
        /** The pagination cursor value. */
        cursor?: number;
        /** event */
        event?:
          | "create"
          | "assign"
          | "unassign"
          | "reject"
          | "accept"
          | "unaccept"
          | "transit"
          | "activate"
          | "complete"
          | "fail"
          | "cancel"
          | "assignee_near"
          | "assignee_away"
          | "updated";
        format?: "json" | "xlsx";
        /** from_state */
        from_state?:
          | "unassigned"
          | "assigned"
          | "accepted"
          | "transit"
          | "active"
          | "completed"
          | "failed"
          | "cancelled"
          | "away"
          | "near";
        /** Which field to use when ordering the results. */
        ordering?: string;
        /** Number of results to return per page. */
        page_size?: number;
        /** to_state */
        to_state?:
          | "unassigned"
          | "assigned"
          | "accepted"
          | "transit"
          | "active"
          | "completed"
          | "failed"
          | "cancelled"
          | "away"
          | "near";
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTaskEventTrackList"];
          "application/xlsx": components["schemas"]["PaginatedTaskEventTrackList"];
        };
      };
    };
  };
  task_event_tracks_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this task event. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TaskEventTrack"];
          "application/xlsx": components["schemas"]["TaskEventTrack"];
        };
      };
    };
  };
  /**
   * Mixin which allows the override of the filename being
   * passed back to the user when the spreadsheet is downloaded.
   */
  task_events_list: {
    parameters: {
      query: {
        /** assignee */
        assignee?: string;
        /** The pagination cursor value. */
        cursor?: number;
        /** event */
        event?:
          | "create"
          | "assign"
          | "unassign"
          | "reject"
          | "accept"
          | "unaccept"
          | "transit"
          | "activate"
          | "complete"
          | "fail"
          | "cancel"
          | "assignee_near"
          | "assignee_away"
          | "updated";
        /** field */
        field?: "state" | "assignee_proximity" | "metafields";
        format?: "json" | "xlsx";
        /** from_state */
        from_state?:
          | "unassigned"
          | "assigned"
          | "accepted"
          | "transit"
          | "active"
          | "completed"
          | "failed"
          | "cancelled"
          | "away"
          | "near";
        /** Which field to use when ordering the results. */
        ordering?: string;
        /** Number of results to return per page. */
        page_size?: number;
        /** task */
        task?: string;
        /** task__account */
        task__account?: string;
        /** to_state */
        to_state?:
          | "unassigned"
          | "assigned"
          | "accepted"
          | "transit"
          | "active"
          | "completed"
          | "failed"
          | "cancelled"
          | "away"
          | "near";
        /** user */
        user?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTaskEventSerializerV2List"];
          "application/xlsx": components["schemas"]["PaginatedTaskEventSerializerV2List"];
        };
      };
    };
  };
  /**
   * Mixin which allows the override of the filename being
   * passed back to the user when the spreadsheet is downloaded.
   */
  task_events_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this task event. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TaskEventSerializerV2"];
          "application/xlsx": components["schemas"]["TaskEventSerializerV2"];
        };
      };
    };
  };
  task_exports_list: {
    parameters: {
      query: {
        /** address__apartment_number */
        address__apartment_number?: string;
        /** address__apartment_number__icontains */
        address__apartment_number__icontains?: string;
        /** address__apartment_number__in */
        address__apartment_number__in?: string;
        /** address__apartment_number__iregex */
        address__apartment_number__iregex?: string;
        /** address__apartment_number__istartswith */
        address__apartment_number__istartswith?: string;
        /** address__apartment_number__search */
        address__apartment_number__search?: string;
        /** address__city */
        address__city?: string;
        /** address__city__icontains */
        address__city__icontains?: string;
        /** address__city__in */
        address__city__in?: string;
        /** address__city__iregex */
        address__city__iregex?: string;
        /** address__city__istartswith */
        address__city__istartswith?: string;
        /** address__city__search */
        address__city__search?: string;
        /** address__country */
        address__country?: string;
        /** address__country__icontains */
        address__country__icontains?: string;
        /** address__country__in */
        address__country__in?: string;
        /** address__country__iregex */
        address__country__iregex?: string;
        /** address__country__istartswith */
        address__country__istartswith?: string;
        /** address__country__search */
        address__country__search?: string;
        /** address__country_code */
        address__country_code?: string;
        /** address__country_code__icontains */
        address__country_code__icontains?: string;
        /** address__country_code__in */
        address__country_code__in?: string;
        /** address__country_code__iregex */
        address__country_code__iregex?: string;
        /** address__country_code__istartswith */
        address__country_code__istartswith?: string;
        /** address__country_code__search */
        address__country_code__search?: string;
        /** address__formatted_address */
        address__formatted_address?: string;
        /** address__formatted_address__icontains */
        address__formatted_address__icontains?: string;
        /** address__formatted_address__in */
        address__formatted_address__in?: string;
        /** address__formatted_address__iregex */
        address__formatted_address__iregex?: string;
        /** address__formatted_address__istartswith */
        address__formatted_address__istartswith?: string;
        /** address__formatted_address__search */
        address__formatted_address__search?: string;
        /** address__google_place_id */
        address__google_place_id?: string;
        /** address__google_place_id__icontains */
        address__google_place_id__icontains?: string;
        /** address__google_place_id__in */
        address__google_place_id__in?: string;
        /** address__google_place_id__iregex */
        address__google_place_id__iregex?: string;
        /** address__google_place_id__istartswith */
        address__google_place_id__istartswith?: string;
        /** address__google_place_id__search */
        address__google_place_id__search?: string;
        /** address__house_number */
        address__house_number?: string;
        /** address__house_number__icontains */
        address__house_number__icontains?: string;
        /** address__house_number__in */
        address__house_number__in?: string;
        /** address__house_number__iregex */
        address__house_number__iregex?: string;
        /** address__house_number__istartswith */
        address__house_number__istartswith?: string;
        /** address__house_number__search */
        address__house_number__search?: string;
        /** address__point_of_interest */
        address__point_of_interest?: string;
        /** address__point_of_interest__icontains */
        address__point_of_interest__icontains?: string;
        /** address__point_of_interest__in */
        address__point_of_interest__in?: string;
        /** address__point_of_interest__iregex */
        address__point_of_interest__iregex?: string;
        /** address__point_of_interest__istartswith */
        address__point_of_interest__istartswith?: string;
        /** address__point_of_interest__search */
        address__point_of_interest__search?: string;
        /** address__postal_code */
        address__postal_code?: string;
        /** address__postal_code__icontains */
        address__postal_code__icontains?: string;
        /** address__postal_code__in */
        address__postal_code__in?: string;
        /** address__postal_code__iregex */
        address__postal_code__iregex?: string;
        /** address__postal_code__istartswith */
        address__postal_code__istartswith?: string;
        /** address__postal_code__search */
        address__postal_code__search?: string;
        /** address__raw_address */
        address__raw_address?: string;
        /** address__raw_address__icontains */
        address__raw_address__icontains?: string;
        /** address__raw_address__in */
        address__raw_address__in?: string;
        /** address__raw_address__iregex */
        address__raw_address__iregex?: string;
        /** address__raw_address__istartswith */
        address__raw_address__istartswith?: string;
        /** address__raw_address__search */
        address__raw_address__search?: string;
        /** address__state */
        address__state?: string;
        /** address__state__icontains */
        address__state__icontains?: string;
        /** address__state__in */
        address__state__in?: string;
        /** address__state__iregex */
        address__state__iregex?: string;
        /** address__state__istartswith */
        address__state__istartswith?: string;
        /** address__state__search */
        address__state__search?: string;
        /** address__street */
        address__street?: string;
        /** address__street__icontains */
        address__street__icontains?: string;
        /** address__street__in */
        address__street__in?: string;
        /** address__street__iregex */
        address__street__iregex?: string;
        /** address__street__istartswith */
        address__street__istartswith?: string;
        /** address__street__search */
        address__street__search?: string;
        /** address_id */
        address_id?: string;
        /** address_id__in */
        address_id__in?: string;
        /** address_id__isnull */
        address_id__isnull?: string;
        /** assignee__email */
        assignee__email?: string;
        /** assignee__email__icontains */
        assignee__email__icontains?: string;
        /** assignee__email__iregex */
        assignee__email__iregex?: string;
        /** assignee__email__isnull */
        assignee__email__isnull?: string;
        /** assignee__email__istartswith */
        assignee__email__istartswith?: string;
        /** assignee__email__search */
        assignee__email__search?: string;
        /** assignee__first_name */
        assignee__first_name?: string;
        /** assignee__first_name__icontains */
        assignee__first_name__icontains?: string;
        /** assignee__first_name__iregex */
        assignee__first_name__iregex?: string;
        /** assignee__first_name__isnull */
        assignee__first_name__isnull?: string;
        /** assignee__first_name__istartswith */
        assignee__first_name__istartswith?: string;
        /** assignee__first_name__search */
        assignee__first_name__search?: string;
        /** assignee__last_name */
        assignee__last_name?: string;
        /** assignee__last_name__icontains */
        assignee__last_name__icontains?: string;
        /** assignee__last_name__iregex */
        assignee__last_name__iregex?: string;
        /** assignee__last_name__isnull */
        assignee__last_name__isnull?: string;
        /** assignee__last_name__istartswith */
        assignee__last_name__istartswith?: string;
        /** assignee__last_name__search */
        assignee__last_name__search?: string;
        /** assignee__phone */
        assignee__phone?: string;
        /** assignee__phone__icontains */
        assignee__phone__icontains?: string;
        /** assignee__phone__iregex */
        assignee__phone__iregex?: string;
        /** assignee__phone__isnull */
        assignee__phone__isnull?: string;
        /** assignee__phone__istartswith */
        assignee__phone__istartswith?: string;
        /** assignee__phone__search */
        assignee__phone__search?: string;
        /** assignee_id */
        assignee_id?: string;
        /** assignee_id__in */
        assignee_id__in?: string;
        /** assignee_id__isnull */
        assignee_id__isnull?: string;
        /** assignee_proximity */
        assignee_proximity?: "away" | "near";
        /** assignee_proximity__in */
        assignee_proximity__in?: string;
        /** category */
        category?: "assignment" | "pick_up" | "drop_off" | "warehouse";
        /** category__in */
        category__in?: string;
        /** contact__company__icontains */
        contact__company__icontains?: string;
        /** contact__company__in */
        contact__company__in?: string;
        /** contact__company__iregex */
        contact__company__iregex?: string;
        /** contact__company__istartswith */
        contact__company__istartswith?: string;
        /** contact__company__search */
        contact__company__search?: string;
        /** contact__email */
        contact__email?: string;
        /** contact__email__icontains */
        contact__email__icontains?: string;
        /** contact__email__in */
        contact__email__in?: string;
        /** contact__email__iregex */
        contact__email__iregex?: string;
        /** contact__email__istartswith */
        contact__email__istartswith?: string;
        /** contact__email__search */
        contact__email__search?: string;
        /** contact__name */
        contact__name?: string;
        /** contact__name__icontains */
        contact__name__icontains?: string;
        /** contact__name__in */
        contact__name__in?: string;
        /** contact__name__iregex */
        contact__name__iregex?: string;
        /** contact__name__istartswith */
        contact__name__istartswith?: string;
        /** contact__name__search */
        contact__name__search?: string;
        /** contact__notes */
        contact__notes?: string;
        /** contact__notes__icontains */
        contact__notes__icontains?: string;
        /** contact__notes__in */
        contact__notes__in?: string;
        /** contact__notes__iregex */
        contact__notes__iregex?: string;
        /** contact__notes__istartswith */
        contact__notes__istartswith?: string;
        /** contact__notes__search */
        contact__notes__search?: string;
        /** contact__phone */
        contact__phone?: string;
        /** contact__phone__icontains */
        contact__phone__icontains?: string;
        /** contact__phone__in */
        contact__phone__in?: string;
        /** contact__phone__iregex */
        contact__phone__iregex?: string;
        /** contact__phone__istartswith */
        contact__phone__istartswith?: string;
        /** contact__phone__search */
        contact__phone__search?: string;
        /** contact_id */
        contact_id?: string;
        /** contact_id__in */
        contact_id__in?: string;
        /** contact_id__isnull */
        contact_id__isnull?: string;
        /** created_by */
        created_by?: string;
        /** created_by__in */
        created_by__in?: string;
        /** created_by__isnull */
        created_by__isnull?: string;
        /** description */
        description?: string;
        /** description__icontains */
        description__icontains?: string;
        /** description__iregex */
        description__iregex?: string;
        /** description__istartswith */
        description__istartswith?: string;
        /** description__search */
        description__search?: string;
        /** duration */
        duration?: string;
        /** duration__gt */
        duration__gt?: string;
        /** duration__gte */
        duration__gte?: string;
        /** duration__lt */
        duration__lt?: string;
        /** duration__lte */
        duration__lte?: string;
        /** external_id */
        external_id?: string;
        /** external_id__icontains */
        external_id__icontains?: string;
        /** external_id__in */
        external_id__in?: string;
        /** external_id__iregex */
        external_id__iregex?: string;
        /** external_id__isnull */
        external_id__isnull?: string;
        /** external_id__istartswith */
        external_id__istartswith?: string;
        /** external_id__search */
        external_id__search?: string;
        format?: "json" | "xlsx";
        /** id */
        id?: string;
        /** id__in */
        id__in?: string;
        /** is_optimal */
        is_optimal?: string;
        /** is_optimal__isnull */
        is_optimal__isnull?: string;
        /** metadata__accepted_distance */
        metadata__accepted_distance?: string;
        /** metadata__accepted_distance__gt */
        metadata__accepted_distance__gt?: string;
        /** metadata__accepted_distance__gte */
        metadata__accepted_distance__gte?: string;
        /** metadata__accepted_distance__lt */
        metadata__accepted_distance__lt?: string;
        /** metadata__accepted_distance__lte */
        metadata__accepted_distance__lte?: string;
        /** metadata__accepted_duration */
        metadata__accepted_duration?: string;
        /** metadata__accepted_duration__gt */
        metadata__accepted_duration__gt?: string;
        /** metadata__accepted_duration__gte */
        metadata__accepted_duration__gte?: string;
        /** metadata__accepted_duration__lt */
        metadata__accepted_duration__lt?: string;
        /** metadata__accepted_duration__lte */
        metadata__accepted_duration__lte?: string;
        /** metadata__active_distance */
        metadata__active_distance?: string;
        /** metadata__active_distance__gt */
        metadata__active_distance__gt?: string;
        /** metadata__active_distance__gte */
        metadata__active_distance__gte?: string;
        /** metadata__active_distance__lt */
        metadata__active_distance__lt?: string;
        /** metadata__active_distance__lte */
        metadata__active_distance__lte?: string;
        /** metadata__active_duration */
        metadata__active_duration?: string;
        /** metadata__active_duration__gt */
        metadata__active_duration__gt?: string;
        /** metadata__active_duration__gte */
        metadata__active_duration__gte?: string;
        /** metadata__active_duration__lt */
        metadata__active_duration__lt?: string;
        /** metadata__active_duration__lte */
        metadata__active_duration__lte?: string;
        /** metadata__assigned_distance */
        metadata__assigned_distance?: string;
        /** metadata__assigned_distance__gt */
        metadata__assigned_distance__gt?: string;
        /** metadata__assigned_distance__gte */
        metadata__assigned_distance__gte?: string;
        /** metadata__assigned_distance__lt */
        metadata__assigned_distance__lt?: string;
        /** metadata__assigned_distance__lte */
        metadata__assigned_distance__lte?: string;
        /** metadata__assigned_duration */
        metadata__assigned_duration?: string;
        /** metadata__assigned_duration__gt */
        metadata__assigned_duration__gt?: string;
        /** metadata__assigned_duration__gte */
        metadata__assigned_duration__gte?: string;
        /** metadata__assigned_duration__lt */
        metadata__assigned_duration__lt?: string;
        /** metadata__assigned_duration__lte */
        metadata__assigned_duration__lte?: string;
        /** metadata__cancelled_distance */
        metadata__cancelled_distance?: string;
        /** metadata__cancelled_distance__gt */
        metadata__cancelled_distance__gt?: string;
        /** metadata__cancelled_distance__gte */
        metadata__cancelled_distance__gte?: string;
        /** metadata__cancelled_distance__lt */
        metadata__cancelled_distance__lt?: string;
        /** metadata__cancelled_distance__lte */
        metadata__cancelled_distance__lte?: string;
        /** metadata__cancelled_duration */
        metadata__cancelled_duration?: string;
        /** metadata__cancelled_duration__gt */
        metadata__cancelled_duration__gt?: string;
        /** metadata__cancelled_duration__gte */
        metadata__cancelled_duration__gte?: string;
        /** metadata__cancelled_duration__lt */
        metadata__cancelled_duration__lt?: string;
        /** metadata__cancelled_duration__lte */
        metadata__cancelled_duration__lte?: string;
        /** metadata__completed_distance */
        metadata__completed_distance?: string;
        /** metadata__completed_distance__gt */
        metadata__completed_distance__gt?: string;
        /** metadata__completed_distance__gte */
        metadata__completed_distance__gte?: string;
        /** metadata__completed_distance__lt */
        metadata__completed_distance__lt?: string;
        /** metadata__completed_distance__lte */
        metadata__completed_distance__lte?: string;
        /** metadata__completed_duration */
        metadata__completed_duration?: string;
        /** metadata__completed_duration__gt */
        metadata__completed_duration__gt?: string;
        /** metadata__completed_duration__gte */
        metadata__completed_duration__gte?: string;
        /** metadata__completed_duration__lt */
        metadata__completed_duration__lt?: string;
        /** metadata__completed_duration__lte */
        metadata__completed_duration__lte?: string;
        /** metadata__documents_count */
        metadata__documents_count?: string;
        /** metadata__documents_count__gt */
        metadata__documents_count__gt?: string;
        /** metadata__documents_count__gte */
        metadata__documents_count__gte?: string;
        /** metadata__documents_count__lt */
        metadata__documents_count__lt?: string;
        /** metadata__documents_count__lte */
        metadata__documents_count__lte?: string;
        /** metadata__events_count */
        metadata__events_count?: string;
        /** metadata__events_count__gt */
        metadata__events_count__gt?: string;
        /** metadata__events_count__gte */
        metadata__events_count__gte?: string;
        /** metadata__events_count__lt */
        metadata__events_count__lt?: string;
        /** metadata__events_count__lte */
        metadata__events_count__lte?: string;
        /** metadata__failed_distance */
        metadata__failed_distance?: string;
        /** metadata__failed_distance__gt */
        metadata__failed_distance__gt?: string;
        /** metadata__failed_distance__gte */
        metadata__failed_distance__gte?: string;
        /** metadata__failed_distance__lt */
        metadata__failed_distance__lt?: string;
        /** metadata__failed_distance__lte */
        metadata__failed_distance__lte?: string;
        /** metadata__failed_duration */
        metadata__failed_duration?: string;
        /** metadata__failed_duration__gt */
        metadata__failed_duration__gt?: string;
        /** metadata__failed_duration__gte */
        metadata__failed_duration__gte?: string;
        /** metadata__failed_duration__lt */
        metadata__failed_duration__lt?: string;
        /** metadata__failed_duration__lte */
        metadata__failed_duration__lte?: string;
        /** metadata__forms_completed_count */
        metadata__forms_completed_count?: string;
        /** metadata__forms_completed_count__gt */
        metadata__forms_completed_count__gt?: string;
        /** metadata__forms_completed_count__gte */
        metadata__forms_completed_count__gte?: string;
        /** metadata__forms_completed_count__lt */
        metadata__forms_completed_count__lt?: string;
        /** metadata__forms_completed_count__lte */
        metadata__forms_completed_count__lte?: string;
        /** metadata__forms_count */
        metadata__forms_count?: string;
        /** metadata__forms_count__gt */
        metadata__forms_count__gt?: string;
        /** metadata__forms_count__gte */
        metadata__forms_count__gte?: string;
        /** metadata__forms_count__lt */
        metadata__forms_count__lt?: string;
        /** metadata__forms_count__lte */
        metadata__forms_count__lte?: string;
        /** metadata__signatures_count */
        metadata__signatures_count?: string;
        /** metadata__signatures_count__gt */
        metadata__signatures_count__gt?: string;
        /** metadata__signatures_count__gte */
        metadata__signatures_count__gte?: string;
        /** metadata__signatures_count__lt */
        metadata__signatures_count__lt?: string;
        /** metadata__signatures_count__lte */
        metadata__signatures_count__lte?: string;
        /** metadata__task_event_notes_count */
        metadata__task_event_notes_count?: string;
        /** metadata__task_event_notes_count__gt */
        metadata__task_event_notes_count__gt?: string;
        /** metadata__task_event_notes_count__gte */
        metadata__task_event_notes_count__gte?: string;
        /** metadata__task_event_notes_count__lt */
        metadata__task_event_notes_count__lt?: string;
        /** metadata__task_event_notes_count__lte */
        metadata__task_event_notes_count__lte?: string;
        /** metadata__transit_distance */
        metadata__transit_distance?: string;
        /** metadata__transit_distance__gt */
        metadata__transit_distance__gt?: string;
        /** metadata__transit_distance__gte */
        metadata__transit_distance__gte?: string;
        /** metadata__transit_distance__lt */
        metadata__transit_distance__lt?: string;
        /** metadata__transit_distance__lte */
        metadata__transit_distance__lte?: string;
        /** metadata__transit_duration */
        metadata__transit_duration?: string;
        /** metadata__transit_duration__gt */
        metadata__transit_duration__gt?: string;
        /** metadata__transit_duration__gte */
        metadata__transit_duration__gte?: string;
        /** metadata__transit_duration__lt */
        metadata__transit_duration__lt?: string;
        /** metadata__transit_duration__lte */
        metadata__transit_duration__lte?: string;
        /** metadata__unassigned_distance */
        metadata__unassigned_distance?: string;
        /** metadata__unassigned_distance__gt */
        metadata__unassigned_distance__gt?: string;
        /** metadata__unassigned_distance__gte */
        metadata__unassigned_distance__gte?: string;
        /** metadata__unassigned_distance__lt */
        metadata__unassigned_distance__lt?: string;
        /** metadata__unassigned_distance__lte */
        metadata__unassigned_distance__lte?: string;
        /** metadata__unassigned_duration */
        metadata__unassigned_duration?: string;
        /** metadata__unassigned_duration__gt */
        metadata__unassigned_duration__gt?: string;
        /** metadata__unassigned_duration__gte */
        metadata__unassigned_duration__gte?: string;
        /** metadata__unassigned_duration__lt */
        metadata__unassigned_duration__lt?: string;
        /** metadata__unassigned_duration__lte */
        metadata__unassigned_duration__lte?: string;
        /** order__auto_assign */
        order__auto_assign?: string;
        /** order__created_by */
        order__created_by?: string;
        /** order__created_by__in */
        order__created_by__in?: string;
        /** order__created_by__isnull */
        order__created_by__isnull?: string;
        /** order__external_id */
        order__external_id?: string;
        /** order__external_id__icontains */
        order__external_id__icontains?: string;
        /** order__external_id__in */
        order__external_id__in?: string;
        /** order__external_id__iregex */
        order__external_id__iregex?: string;
        /** order__external_id__isnull */
        order__external_id__isnull?: string;
        /** order__external_id__istartswith */
        order__external_id__istartswith?: string;
        /** order__external_id__search */
        order__external_id__search?: string;
        /** order__reference */
        order__reference?: string;
        /** order__reference__icontains */
        order__reference__icontains?: string;
        /** order__reference__in */
        order__reference__in?: string;
        /** order__reference__iregex */
        order__reference__iregex?: string;
        /** order__reference__istartswith */
        order__reference__istartswith?: string;
        /** order__reference__search */
        order__reference__search?: string;
        /** order_id */
        order_id?: string;
        /** order_id__in */
        order_id__in?: string;
        /** order_id__isnull */
        order_id__isnull?: string;
        /** orderer_id */
        orderer_id?: string;
        /** orderer_id__in */
        orderer_id__in?: string;
        /** orderer_id__isnull */
        orderer_id__isnull?: string;
        /** Which field to use when ordering the results. */
        ordering?: string;
        /** owner_id */
        owner_id?: string;
        /** owner_id__in */
        owner_id__in?: string;
        /** owner_id__isnull */
        owner_id__isnull?: string;
        /** A page number within the paginated result set. */
        page?: number;
        /** Number of results to return per page. */
        page_size?: number;
        /** priority */
        priority?: string;
        /** priority__gt */
        priority__gt?: string;
        /** priority__gte */
        priority__gte?: string;
        /** priority__in */
        priority__in?: string;
        /** priority__lt */
        priority__lt?: string;
        /** priority__lte */
        priority__lte?: string;
        /** receiver_id */
        receiver_id?: string;
        /** receiver_id__in */
        receiver_id__in?: string;
        /** receiver_id__isnull */
        receiver_id__isnull?: string;
        /** reference */
        reference?: string;
        /** reference__icontains */
        reference__icontains?: string;
        /** reference__in */
        reference__in?: string;
        /** reference__iregex */
        reference__iregex?: string;
        /** reference__istartswith */
        reference__istartswith?: string;
        /** reference__search */
        reference__search?: string;
        /** route_id */
        route_id?: string;
        /** route_id__in */
        route_id__in?: string;
        /** route_id__isnull */
        route_id__isnull?: string;
        /** A search term. */
        search?: string;
        /** state */
        state?:
          | "unassigned"
          | "assigned"
          | "accepted"
          | "transit"
          | "active"
          | "completed"
          | "failed"
          | "cancelled";
        /** state__in */
        state__in?: string;
        /** unassignee_id */
        unassignee_id?: string;
        /** unassignee_id__in */
        unassignee_id__in?: string;
        /** unassignee_id__isnull */
        unassignee_id__isnull?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTaskExportList"];
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": components["schemas"]["PaginatedTaskExportList"];
        };
      };
    };
  };
  task_forms_list: {
    parameters: {
      query: {
        /** completed */
        completed?: string;
        /** The pagination cursor value. */
        cursor?: number;
        format?: "json" | "xlsx";
        /** Number of results to return per page. */
        page_size?: number;
        /** task */
        task?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTaskFormList"];
          "application/xlsx": components["schemas"]["PaginatedTaskFormList"];
        };
      };
    };
  };
  task_forms_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["TaskForm"];
          "application/xlsx": components["schemas"]["TaskForm"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaskForm"];
        "application/x-www-form-urlencoded": components["schemas"]["TaskForm"];
        "multipart/form-data": components["schemas"]["TaskForm"];
      };
    };
  };
  task_forms_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this task form. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TaskForm"];
          "application/xlsx": components["schemas"]["TaskForm"];
        };
      };
    };
  };
  task_forms_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this task form. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TaskForm"];
          "application/xlsx": components["schemas"]["TaskForm"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaskForm"];
        "application/x-www-form-urlencoded": components["schemas"]["TaskForm"];
        "multipart/form-data": components["schemas"]["TaskForm"];
      };
    };
  };
  task_forms_destroy: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this task form. */
        id: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  task_forms_partial_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this task form. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TaskForm"];
          "application/xlsx": components["schemas"]["TaskForm"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedTaskForm"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedTaskForm"];
        "multipart/form-data": components["schemas"]["PatchedTaskForm"];
      };
    };
  };
  task_import_list: {
    parameters: {
      query: {
        /** account */
        account?: string;
        /** The pagination cursor value. */
        cursor?: number;
        format?: "json" | "xlsx";
        /** Number of results to return per page. */
        page_size?: number;
        /** state */
        state?: "pending" | "started" | "completed" | "failed";
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTasksBackgroundImportList"];
          "application/xlsx": components["schemas"]["PaginatedTasksBackgroundImportList"];
        };
      };
    };
  };
  task_import_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["TasksBackgroundImport"];
          "application/xlsx": components["schemas"]["TasksBackgroundImport"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TasksBackgroundImport"];
        "application/x-www-form-urlencoded": components["schemas"]["TasksBackgroundImport"];
        "multipart/form-data": components["schemas"]["TasksBackgroundImport"];
      };
    };
  };
  task_import_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this tasks background import. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TasksBackgroundImport"];
          "application/xlsx": components["schemas"]["TasksBackgroundImport"];
        };
      };
    };
  };
  task_metadatas_list: {
    parameters: {
      query: {
        /** The pagination cursor value. */
        cursor?: number;
        format?: "json" | "xlsx";
        /** Number of results to return per page. */
        page_size?: number;
        /** task */
        task?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTaskMetadataList"];
          "application/xlsx": components["schemas"]["PaginatedTaskMetadataList"];
        };
      };
    };
  };
  task_metadatas_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this task metadata. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TaskMetadata"];
          "application/xlsx": components["schemas"]["TaskMetadata"];
        };
      };
    };
  };
  tasks_list: {
    parameters: {
      query: {
        /** address__apartment_number */
        address__apartment_number?: string;
        /** address__apartment_number__icontains */
        address__apartment_number__icontains?: string;
        /** address__apartment_number__in */
        address__apartment_number__in?: string;
        /** address__apartment_number__iregex */
        address__apartment_number__iregex?: string;
        /** address__apartment_number__istartswith */
        address__apartment_number__istartswith?: string;
        /** address__apartment_number__search */
        address__apartment_number__search?: string;
        /** address__city */
        address__city?: string;
        /** address__city__icontains */
        address__city__icontains?: string;
        /** address__city__in */
        address__city__in?: string;
        /** address__city__iregex */
        address__city__iregex?: string;
        /** address__city__istartswith */
        address__city__istartswith?: string;
        /** address__city__search */
        address__city__search?: string;
        /** address__country */
        address__country?: string;
        /** address__country__icontains */
        address__country__icontains?: string;
        /** address__country__in */
        address__country__in?: string;
        /** address__country__iregex */
        address__country__iregex?: string;
        /** address__country__istartswith */
        address__country__istartswith?: string;
        /** address__country__search */
        address__country__search?: string;
        /** address__country_code */
        address__country_code?: string;
        /** address__country_code__icontains */
        address__country_code__icontains?: string;
        /** address__country_code__in */
        address__country_code__in?: string;
        /** address__country_code__iregex */
        address__country_code__iregex?: string;
        /** address__country_code__istartswith */
        address__country_code__istartswith?: string;
        /** address__country_code__search */
        address__country_code__search?: string;
        /** address__formatted_address */
        address__formatted_address?: string;
        /** address__formatted_address__icontains */
        address__formatted_address__icontains?: string;
        /** address__formatted_address__in */
        address__formatted_address__in?: string;
        /** address__formatted_address__iregex */
        address__formatted_address__iregex?: string;
        /** address__formatted_address__istartswith */
        address__formatted_address__istartswith?: string;
        /** address__formatted_address__search */
        address__formatted_address__search?: string;
        /** address__google_place_id */
        address__google_place_id?: string;
        /** address__google_place_id__icontains */
        address__google_place_id__icontains?: string;
        /** address__google_place_id__in */
        address__google_place_id__in?: string;
        /** address__google_place_id__iregex */
        address__google_place_id__iregex?: string;
        /** address__google_place_id__istartswith */
        address__google_place_id__istartswith?: string;
        /** address__google_place_id__search */
        address__google_place_id__search?: string;
        /** address__house_number */
        address__house_number?: string;
        /** address__house_number__icontains */
        address__house_number__icontains?: string;
        /** address__house_number__in */
        address__house_number__in?: string;
        /** address__house_number__iregex */
        address__house_number__iregex?: string;
        /** address__house_number__istartswith */
        address__house_number__istartswith?: string;
        /** address__house_number__search */
        address__house_number__search?: string;
        /** address__point_of_interest */
        address__point_of_interest?: string;
        /** address__point_of_interest__icontains */
        address__point_of_interest__icontains?: string;
        /** address__point_of_interest__in */
        address__point_of_interest__in?: string;
        /** address__point_of_interest__iregex */
        address__point_of_interest__iregex?: string;
        /** address__point_of_interest__istartswith */
        address__point_of_interest__istartswith?: string;
        /** address__point_of_interest__search */
        address__point_of_interest__search?: string;
        /** address__postal_code */
        address__postal_code?: string;
        /** address__postal_code__icontains */
        address__postal_code__icontains?: string;
        /** address__postal_code__in */
        address__postal_code__in?: string;
        /** address__postal_code__iregex */
        address__postal_code__iregex?: string;
        /** address__postal_code__istartswith */
        address__postal_code__istartswith?: string;
        /** address__postal_code__search */
        address__postal_code__search?: string;
        /** address__raw_address */
        address__raw_address?: string;
        /** address__raw_address__icontains */
        address__raw_address__icontains?: string;
        /** address__raw_address__in */
        address__raw_address__in?: string;
        /** address__raw_address__iregex */
        address__raw_address__iregex?: string;
        /** address__raw_address__istartswith */
        address__raw_address__istartswith?: string;
        /** address__raw_address__search */
        address__raw_address__search?: string;
        /** address__state */
        address__state?: string;
        /** address__state__icontains */
        address__state__icontains?: string;
        /** address__state__in */
        address__state__in?: string;
        /** address__state__iregex */
        address__state__iregex?: string;
        /** address__state__istartswith */
        address__state__istartswith?: string;
        /** address__state__search */
        address__state__search?: string;
        /** address__street */
        address__street?: string;
        /** address__street__icontains */
        address__street__icontains?: string;
        /** address__street__in */
        address__street__in?: string;
        /** address__street__iregex */
        address__street__iregex?: string;
        /** address__street__istartswith */
        address__street__istartswith?: string;
        /** address__street__search */
        address__street__search?: string;
        /** address_id */
        address_id?: string;
        /** address_id__in */
        address_id__in?: string;
        /** address_id__isnull */
        address_id__isnull?: string;
        /** assignee__email */
        assignee__email?: string;
        /** assignee__email__icontains */
        assignee__email__icontains?: string;
        /** assignee__email__iregex */
        assignee__email__iregex?: string;
        /** assignee__email__isnull */
        assignee__email__isnull?: string;
        /** assignee__email__istartswith */
        assignee__email__istartswith?: string;
        /** assignee__email__search */
        assignee__email__search?: string;
        /** assignee__first_name */
        assignee__first_name?: string;
        /** assignee__first_name__icontains */
        assignee__first_name__icontains?: string;
        /** assignee__first_name__iregex */
        assignee__first_name__iregex?: string;
        /** assignee__first_name__isnull */
        assignee__first_name__isnull?: string;
        /** assignee__first_name__istartswith */
        assignee__first_name__istartswith?: string;
        /** assignee__first_name__search */
        assignee__first_name__search?: string;
        /** assignee__last_name */
        assignee__last_name?: string;
        /** assignee__last_name__icontains */
        assignee__last_name__icontains?: string;
        /** assignee__last_name__iregex */
        assignee__last_name__iregex?: string;
        /** assignee__last_name__isnull */
        assignee__last_name__isnull?: string;
        /** assignee__last_name__istartswith */
        assignee__last_name__istartswith?: string;
        /** assignee__last_name__search */
        assignee__last_name__search?: string;
        /** assignee__phone */
        assignee__phone?: string;
        /** assignee__phone__icontains */
        assignee__phone__icontains?: string;
        /** assignee__phone__iregex */
        assignee__phone__iregex?: string;
        /** assignee__phone__isnull */
        assignee__phone__isnull?: string;
        /** assignee__phone__istartswith */
        assignee__phone__istartswith?: string;
        /** assignee__phone__search */
        assignee__phone__search?: string;
        /** assignee_id */
        assignee_id?: string;
        /** assignee_id__in */
        assignee_id__in?: string;
        /** assignee_id__isnull */
        assignee_id__isnull?: string;
        /** assignee_proximity */
        assignee_proximity?: "away" | "near";
        /** assignee_proximity__in */
        assignee_proximity__in?: string;
        /** category */
        category?: "assignment" | "pick_up" | "drop_off" | "warehouse";
        /** category__in */
        category__in?: string;
        /** contact__company__icontains */
        contact__company__icontains?: string;
        /** contact__company__in */
        contact__company__in?: string;
        /** contact__company__iregex */
        contact__company__iregex?: string;
        /** contact__company__istartswith */
        contact__company__istartswith?: string;
        /** contact__company__search */
        contact__company__search?: string;
        /** contact__email */
        contact__email?: string;
        /** contact__email__icontains */
        contact__email__icontains?: string;
        /** contact__email__in */
        contact__email__in?: string;
        /** contact__email__iregex */
        contact__email__iregex?: string;
        /** contact__email__istartswith */
        contact__email__istartswith?: string;
        /** contact__email__search */
        contact__email__search?: string;
        /** contact__name */
        contact__name?: string;
        /** contact__name__icontains */
        contact__name__icontains?: string;
        /** contact__name__in */
        contact__name__in?: string;
        /** contact__name__iregex */
        contact__name__iregex?: string;
        /** contact__name__istartswith */
        contact__name__istartswith?: string;
        /** contact__name__search */
        contact__name__search?: string;
        /** contact__notes */
        contact__notes?: string;
        /** contact__notes__icontains */
        contact__notes__icontains?: string;
        /** contact__notes__in */
        contact__notes__in?: string;
        /** contact__notes__iregex */
        contact__notes__iregex?: string;
        /** contact__notes__istartswith */
        contact__notes__istartswith?: string;
        /** contact__notes__search */
        contact__notes__search?: string;
        /** contact__phone */
        contact__phone?: string;
        /** contact__phone__icontains */
        contact__phone__icontains?: string;
        /** contact__phone__in */
        contact__phone__in?: string;
        /** contact__phone__iregex */
        contact__phone__iregex?: string;
        /** contact__phone__istartswith */
        contact__phone__istartswith?: string;
        /** contact__phone__search */
        contact__phone__search?: string;
        /** contact_id */
        contact_id?: string;
        /** contact_id__in */
        contact_id__in?: string;
        /** contact_id__isnull */
        contact_id__isnull?: string;
        /** created_by */
        created_by?: string;
        /** created_by__in */
        created_by__in?: string;
        /** created_by__isnull */
        created_by__isnull?: string;
        /** The pagination cursor value. */
        cursor?: number;
        /** description */
        description?: string;
        /** description__icontains */
        description__icontains?: string;
        /** description__iregex */
        description__iregex?: string;
        /** description__istartswith */
        description__istartswith?: string;
        /** description__search */
        description__search?: string;
        /** duration */
        duration?: string;
        /** duration__gt */
        duration__gt?: string;
        /** duration__gte */
        duration__gte?: string;
        /** duration__lt */
        duration__lt?: string;
        /** duration__lte */
        duration__lte?: string;
        /** external_id */
        external_id?: string;
        /** external_id__icontains */
        external_id__icontains?: string;
        /** external_id__in */
        external_id__in?: string;
        /** external_id__iregex */
        external_id__iregex?: string;
        /** external_id__isnull */
        external_id__isnull?: string;
        /** external_id__istartswith */
        external_id__istartswith?: string;
        /** external_id__search */
        external_id__search?: string;
        format?: "json" | "xml";
        /** id */
        id?: string;
        /** id__in */
        id__in?: string;
        /** is_optimal */
        is_optimal?: string;
        /** is_optimal__isnull */
        is_optimal__isnull?: string;
        /** metadata__accepted_distance */
        metadata__accepted_distance?: string;
        /** metadata__accepted_distance__gt */
        metadata__accepted_distance__gt?: string;
        /** metadata__accepted_distance__gte */
        metadata__accepted_distance__gte?: string;
        /** metadata__accepted_distance__lt */
        metadata__accepted_distance__lt?: string;
        /** metadata__accepted_distance__lte */
        metadata__accepted_distance__lte?: string;
        /** metadata__accepted_duration */
        metadata__accepted_duration?: string;
        /** metadata__accepted_duration__gt */
        metadata__accepted_duration__gt?: string;
        /** metadata__accepted_duration__gte */
        metadata__accepted_duration__gte?: string;
        /** metadata__accepted_duration__lt */
        metadata__accepted_duration__lt?: string;
        /** metadata__accepted_duration__lte */
        metadata__accepted_duration__lte?: string;
        /** metadata__active_distance */
        metadata__active_distance?: string;
        /** metadata__active_distance__gt */
        metadata__active_distance__gt?: string;
        /** metadata__active_distance__gte */
        metadata__active_distance__gte?: string;
        /** metadata__active_distance__lt */
        metadata__active_distance__lt?: string;
        /** metadata__active_distance__lte */
        metadata__active_distance__lte?: string;
        /** metadata__active_duration */
        metadata__active_duration?: string;
        /** metadata__active_duration__gt */
        metadata__active_duration__gt?: string;
        /** metadata__active_duration__gte */
        metadata__active_duration__gte?: string;
        /** metadata__active_duration__lt */
        metadata__active_duration__lt?: string;
        /** metadata__active_duration__lte */
        metadata__active_duration__lte?: string;
        /** metadata__assigned_distance */
        metadata__assigned_distance?: string;
        /** metadata__assigned_distance__gt */
        metadata__assigned_distance__gt?: string;
        /** metadata__assigned_distance__gte */
        metadata__assigned_distance__gte?: string;
        /** metadata__assigned_distance__lt */
        metadata__assigned_distance__lt?: string;
        /** metadata__assigned_distance__lte */
        metadata__assigned_distance__lte?: string;
        /** metadata__assigned_duration */
        metadata__assigned_duration?: string;
        /** metadata__assigned_duration__gt */
        metadata__assigned_duration__gt?: string;
        /** metadata__assigned_duration__gte */
        metadata__assigned_duration__gte?: string;
        /** metadata__assigned_duration__lt */
        metadata__assigned_duration__lt?: string;
        /** metadata__assigned_duration__lte */
        metadata__assigned_duration__lte?: string;
        /** metadata__cancelled_distance */
        metadata__cancelled_distance?: string;
        /** metadata__cancelled_distance__gt */
        metadata__cancelled_distance__gt?: string;
        /** metadata__cancelled_distance__gte */
        metadata__cancelled_distance__gte?: string;
        /** metadata__cancelled_distance__lt */
        metadata__cancelled_distance__lt?: string;
        /** metadata__cancelled_distance__lte */
        metadata__cancelled_distance__lte?: string;
        /** metadata__cancelled_duration */
        metadata__cancelled_duration?: string;
        /** metadata__cancelled_duration__gt */
        metadata__cancelled_duration__gt?: string;
        /** metadata__cancelled_duration__gte */
        metadata__cancelled_duration__gte?: string;
        /** metadata__cancelled_duration__lt */
        metadata__cancelled_duration__lt?: string;
        /** metadata__cancelled_duration__lte */
        metadata__cancelled_duration__lte?: string;
        /** metadata__completed_distance */
        metadata__completed_distance?: string;
        /** metadata__completed_distance__gt */
        metadata__completed_distance__gt?: string;
        /** metadata__completed_distance__gte */
        metadata__completed_distance__gte?: string;
        /** metadata__completed_distance__lt */
        metadata__completed_distance__lt?: string;
        /** metadata__completed_distance__lte */
        metadata__completed_distance__lte?: string;
        /** metadata__completed_duration */
        metadata__completed_duration?: string;
        /** metadata__completed_duration__gt */
        metadata__completed_duration__gt?: string;
        /** metadata__completed_duration__gte */
        metadata__completed_duration__gte?: string;
        /** metadata__completed_duration__lt */
        metadata__completed_duration__lt?: string;
        /** metadata__completed_duration__lte */
        metadata__completed_duration__lte?: string;
        /** metadata__documents_count */
        metadata__documents_count?: string;
        /** metadata__documents_count__gt */
        metadata__documents_count__gt?: string;
        /** metadata__documents_count__gte */
        metadata__documents_count__gte?: string;
        /** metadata__documents_count__lt */
        metadata__documents_count__lt?: string;
        /** metadata__documents_count__lte */
        metadata__documents_count__lte?: string;
        /** metadata__events_count */
        metadata__events_count?: string;
        /** metadata__events_count__gt */
        metadata__events_count__gt?: string;
        /** metadata__events_count__gte */
        metadata__events_count__gte?: string;
        /** metadata__events_count__lt */
        metadata__events_count__lt?: string;
        /** metadata__events_count__lte */
        metadata__events_count__lte?: string;
        /** metadata__failed_distance */
        metadata__failed_distance?: string;
        /** metadata__failed_distance__gt */
        metadata__failed_distance__gt?: string;
        /** metadata__failed_distance__gte */
        metadata__failed_distance__gte?: string;
        /** metadata__failed_distance__lt */
        metadata__failed_distance__lt?: string;
        /** metadata__failed_distance__lte */
        metadata__failed_distance__lte?: string;
        /** metadata__failed_duration */
        metadata__failed_duration?: string;
        /** metadata__failed_duration__gt */
        metadata__failed_duration__gt?: string;
        /** metadata__failed_duration__gte */
        metadata__failed_duration__gte?: string;
        /** metadata__failed_duration__lt */
        metadata__failed_duration__lt?: string;
        /** metadata__failed_duration__lte */
        metadata__failed_duration__lte?: string;
        /** metadata__forms_completed_count */
        metadata__forms_completed_count?: string;
        /** metadata__forms_completed_count__gt */
        metadata__forms_completed_count__gt?: string;
        /** metadata__forms_completed_count__gte */
        metadata__forms_completed_count__gte?: string;
        /** metadata__forms_completed_count__lt */
        metadata__forms_completed_count__lt?: string;
        /** metadata__forms_completed_count__lte */
        metadata__forms_completed_count__lte?: string;
        /** metadata__forms_count */
        metadata__forms_count?: string;
        /** metadata__forms_count__gt */
        metadata__forms_count__gt?: string;
        /** metadata__forms_count__gte */
        metadata__forms_count__gte?: string;
        /** metadata__forms_count__lt */
        metadata__forms_count__lt?: string;
        /** metadata__forms_count__lte */
        metadata__forms_count__lte?: string;
        /** metadata__signatures_count */
        metadata__signatures_count?: string;
        /** metadata__signatures_count__gt */
        metadata__signatures_count__gt?: string;
        /** metadata__signatures_count__gte */
        metadata__signatures_count__gte?: string;
        /** metadata__signatures_count__lt */
        metadata__signatures_count__lt?: string;
        /** metadata__signatures_count__lte */
        metadata__signatures_count__lte?: string;
        /** metadata__task_event_notes_count */
        metadata__task_event_notes_count?: string;
        /** metadata__task_event_notes_count__gt */
        metadata__task_event_notes_count__gt?: string;
        /** metadata__task_event_notes_count__gte */
        metadata__task_event_notes_count__gte?: string;
        /** metadata__task_event_notes_count__lt */
        metadata__task_event_notes_count__lt?: string;
        /** metadata__task_event_notes_count__lte */
        metadata__task_event_notes_count__lte?: string;
        /** metadata__transit_distance */
        metadata__transit_distance?: string;
        /** metadata__transit_distance__gt */
        metadata__transit_distance__gt?: string;
        /** metadata__transit_distance__gte */
        metadata__transit_distance__gte?: string;
        /** metadata__transit_distance__lt */
        metadata__transit_distance__lt?: string;
        /** metadata__transit_distance__lte */
        metadata__transit_distance__lte?: string;
        /** metadata__transit_duration */
        metadata__transit_duration?: string;
        /** metadata__transit_duration__gt */
        metadata__transit_duration__gt?: string;
        /** metadata__transit_duration__gte */
        metadata__transit_duration__gte?: string;
        /** metadata__transit_duration__lt */
        metadata__transit_duration__lt?: string;
        /** metadata__transit_duration__lte */
        metadata__transit_duration__lte?: string;
        /** metadata__unassigned_distance */
        metadata__unassigned_distance?: string;
        /** metadata__unassigned_distance__gt */
        metadata__unassigned_distance__gt?: string;
        /** metadata__unassigned_distance__gte */
        metadata__unassigned_distance__gte?: string;
        /** metadata__unassigned_distance__lt */
        metadata__unassigned_distance__lt?: string;
        /** metadata__unassigned_distance__lte */
        metadata__unassigned_distance__lte?: string;
        /** metadata__unassigned_duration */
        metadata__unassigned_duration?: string;
        /** metadata__unassigned_duration__gt */
        metadata__unassigned_duration__gt?: string;
        /** metadata__unassigned_duration__gte */
        metadata__unassigned_duration__gte?: string;
        /** metadata__unassigned_duration__lt */
        metadata__unassigned_duration__lt?: string;
        /** metadata__unassigned_duration__lte */
        metadata__unassigned_duration__lte?: string;
        /** order__auto_assign */
        order__auto_assign?: string;
        /** order__created_by */
        order__created_by?: string;
        /** order__created_by__in */
        order__created_by__in?: string;
        /** order__created_by__isnull */
        order__created_by__isnull?: string;
        /** order__external_id */
        order__external_id?: string;
        /** order__external_id__icontains */
        order__external_id__icontains?: string;
        /** order__external_id__in */
        order__external_id__in?: string;
        /** order__external_id__iregex */
        order__external_id__iregex?: string;
        /** order__external_id__isnull */
        order__external_id__isnull?: string;
        /** order__external_id__istartswith */
        order__external_id__istartswith?: string;
        /** order__external_id__search */
        order__external_id__search?: string;
        /** order__reference */
        order__reference?: string;
        /** order__reference__icontains */
        order__reference__icontains?: string;
        /** order__reference__in */
        order__reference__in?: string;
        /** order__reference__iregex */
        order__reference__iregex?: string;
        /** order__reference__istartswith */
        order__reference__istartswith?: string;
        /** order__reference__search */
        order__reference__search?: string;
        /** order_id */
        order_id?: string;
        /** order_id__in */
        order_id__in?: string;
        /** order_id__isnull */
        order_id__isnull?: string;
        /** orderer_id */
        orderer_id?: string;
        /** orderer_id__in */
        orderer_id__in?: string;
        /** orderer_id__isnull */
        orderer_id__isnull?: string;
        /** Which field to use when ordering the results. */
        ordering?: string;
        /** owner_id */
        owner_id?: string;
        /** owner_id__in */
        owner_id__in?: string;
        /** owner_id__isnull */
        owner_id__isnull?: string;
        /** Number of results to return per page. */
        page_size?: number;
        /** priority */
        priority?: string;
        /** priority__gt */
        priority__gt?: string;
        /** priority__gte */
        priority__gte?: string;
        /** priority__in */
        priority__in?: string;
        /** priority__lt */
        priority__lt?: string;
        /** priority__lte */
        priority__lte?: string;
        /** receiver_id */
        receiver_id?: string;
        /** receiver_id__in */
        receiver_id__in?: string;
        /** receiver_id__isnull */
        receiver_id__isnull?: string;
        /** reference */
        reference?: string;
        /** reference__icontains */
        reference__icontains?: string;
        /** reference__in */
        reference__in?: string;
        /** reference__iregex */
        reference__iregex?: string;
        /** reference__istartswith */
        reference__istartswith?: string;
        /** reference__search */
        reference__search?: string;
        /** route_id */
        route_id?: string;
        /** route_id__in */
        route_id__in?: string;
        /** route_id__isnull */
        route_id__isnull?: string;
        /** A search term. */
        search?: string;
        /** state */
        state?:
          | "unassigned"
          | "assigned"
          | "accepted"
          | "transit"
          | "active"
          | "completed"
          | "failed"
          | "cancelled";
        /** state__in */
        state__in?: string;
        /** unassignee_id */
        unassignee_id?: string;
        /** unassignee_id__in */
        unassignee_id__in?: string;
        /** unassignee_id__isnull */
        unassignee_id__isnull?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTaskSerializerV2List"];
          "application/xml": components["schemas"]["PaginatedTaskSerializerV2List"];
        };
      };
    };
  };
  tasks_create: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["TaskSerializerV2"];
          "application/xml": components["schemas"]["TaskSerializerV2"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaskSerializerV2"];
        "application/xml": components["schemas"]["TaskSerializerV2"];
      };
    };
  };
  tasks_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
      path: {
        /** A UUID string identifying this task. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TaskSerializerV2"];
          "application/xml": components["schemas"]["TaskSerializerV2"];
        };
      };
    };
  };
  tasks_update: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
      path: {
        /** A UUID string identifying this task. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TaskSerializerV2"];
          "application/xml": components["schemas"]["TaskSerializerV2"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaskSerializerV2"];
        "application/xml": components["schemas"]["TaskSerializerV2"];
      };
    };
  };
  tasks_partial_update: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
      path: {
        /** A UUID string identifying this task. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TaskSerializerV2"];
          "application/xml": components["schemas"]["TaskSerializerV2"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedTaskSerializerV2"];
        "application/xml": components["schemas"]["PatchedTaskSerializerV2"];
      };
    };
  };
  tasks_accept_create: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
      path: {
        /** A UUID string identifying this task. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TaskAction"];
          "application/xml": components["schemas"]["TaskAction"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaskAction"];
        "application/xml": components["schemas"]["TaskAction"];
      };
    };
  };
  tasks_account_change_create: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
      path: {
        /** A UUID string identifying this task. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TaskAccountChange"];
          "application/xml": components["schemas"]["TaskAccountChange"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaskAccountChange"];
        "application/xml": components["schemas"]["TaskAccountChange"];
      };
    };
  };
  tasks_activate_create: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
      path: {
        /** A UUID string identifying this task. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TaskAction"];
          "application/xml": components["schemas"]["TaskAction"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaskAction"];
        "application/xml": components["schemas"]["TaskAction"];
      };
    };
  };
  tasks_assign_create: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
      path: {
        /** A UUID string identifying this task. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TaskAssign"];
          "application/xml": components["schemas"]["TaskAssign"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaskAssign"];
        "application/xml": components["schemas"]["TaskAssign"];
      };
    };
  };
  tasks_cancel_create: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
      path: {
        /** A UUID string identifying this task. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TaskAction"];
          "application/xml": components["schemas"]["TaskAction"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaskAction"];
        "application/xml": components["schemas"]["TaskAction"];
      };
    };
  };
  tasks_complete_create: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
      path: {
        /** A UUID string identifying this task. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TaskAction"];
          "application/xml": components["schemas"]["TaskAction"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaskAction"];
        "application/xml": components["schemas"]["TaskAction"];
      };
    };
  };
  tasks_documents_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
      path: {
        /** A UUID string identifying this task. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TaskSerializerV2"];
          "application/xml": components["schemas"]["TaskSerializerV2"];
        };
      };
    };
  };
  tasks_events_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
      path: {
        /** A UUID string identifying this task. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TaskSerializerV2"];
          "application/xml": components["schemas"]["TaskSerializerV2"];
        };
      };
    };
  };
  tasks_fail_create: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
      path: {
        /** A UUID string identifying this task. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TaskAction"];
          "application/xml": components["schemas"]["TaskAction"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaskAction"];
        "application/xml": components["schemas"]["TaskAction"];
      };
    };
  };
  tasks_reject_create: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
      path: {
        /** A UUID string identifying this task. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TaskAction"];
          "application/xml": components["schemas"]["TaskAction"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaskAction"];
        "application/xml": components["schemas"]["TaskAction"];
      };
    };
  };
  tasks_signatures_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
      path: {
        /** A UUID string identifying this task. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TaskSerializerV2"];
          "application/xml": components["schemas"]["TaskSerializerV2"];
        };
      };
    };
  };
  tasks_transit_create: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
      path: {
        /** A UUID string identifying this task. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TaskAction"];
          "application/xml": components["schemas"]["TaskAction"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaskAction"];
        "application/xml": components["schemas"]["TaskAction"];
      };
    };
  };
  tasks_unaccept_create: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
      path: {
        /** A UUID string identifying this task. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TaskAction"];
          "application/xml": components["schemas"]["TaskAction"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaskAction"];
        "application/xml": components["schemas"]["TaskAction"];
      };
    };
  };
  tasks_unassign_create: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
      path: {
        /** A UUID string identifying this task. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TaskAction"];
          "application/xml": components["schemas"]["TaskAction"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaskAction"];
        "application/xml": components["schemas"]["TaskAction"];
      };
    };
  };
  tasks_reorder_create: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TaskListReorderRequest"];
          "application/xml": components["schemas"]["TaskListReorderRequest"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaskListReorderRequest"];
        "application/xml": components["schemas"]["TaskListReorderRequest"];
      };
    };
  };
  tasks_reposition_create: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TaskSerializerV2"];
          "application/xml": components["schemas"]["TaskSerializerV2"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaskSerializerV2"];
        "application/xml": components["schemas"]["TaskSerializerV2"];
      };
    };
  };
  time_location_features_list: {
    parameters: {
      query: {
        /** The pagination cursor value. */
        cursor?: number;
        format?: "json" | "xlsx";
        /** Number of results to return per page. */
        page_size?: number;
        /** state */
        state?: "unknown" | "stopped" | "moving";
        /** user */
        user?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTimeLocationFeatureList"];
          "application/xlsx": components["schemas"]["PaginatedTimeLocationFeatureList"];
        };
      };
    };
  };
  time_location_features_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["TimeLocationFeature"];
          "application/xlsx": components["schemas"]["TimeLocationFeature"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TimeLocationFeature"];
        "application/x-www-form-urlencoded": components["schemas"]["TimeLocationFeature"];
        "multipart/form-data": components["schemas"]["TimeLocationFeature"];
      };
    };
  };
  time_location_features_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this time location. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TimeLocationFeature"];
          "application/xlsx": components["schemas"]["TimeLocationFeature"];
        };
      };
    };
  };
  time_location_features_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this time location. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TimeLocationFeature"];
          "application/xlsx": components["schemas"]["TimeLocationFeature"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TimeLocationFeature"];
        "application/x-www-form-urlencoded": components["schemas"]["TimeLocationFeature"];
        "multipart/form-data": components["schemas"]["TimeLocationFeature"];
      };
    };
  };
  time_location_features_destroy: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this time location. */
        id: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  time_location_features_partial_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this time location. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TimeLocationFeature"];
          "application/xlsx": components["schemas"]["TimeLocationFeature"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedTimeLocationFeature"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedTimeLocationFeature"];
        "multipart/form-data": components["schemas"]["PatchedTimeLocationFeature"];
      };
    };
  };
  time_locations_list: {
    parameters: {
      query: {
        /** The pagination cursor value. */
        cursor?: number;
        format?: "json" | "xlsx";
        /** Number of results to return per page. */
        page_size?: number;
        /** state */
        state?: "unknown" | "stopped" | "moving";
        /** user */
        user?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTimeLocationList"];
          "application/xlsx": components["schemas"]["PaginatedTimeLocationList"];
        };
      };
    };
  };
  time_locations_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["TimeLocation"];
          "application/xlsx": components["schemas"]["TimeLocation"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TimeLocation"];
        "application/x-www-form-urlencoded": components["schemas"]["TimeLocation"];
        "multipart/form-data": components["schemas"]["TimeLocation"];
      };
    };
  };
  time_locations_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this time location. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TimeLocation"];
          "application/xlsx": components["schemas"]["TimeLocation"];
        };
      };
    };
  };
  track_location_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        tracker_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": { [key: string]: unknown };
          "application/xlsx": { [key: string]: unknown };
        };
      };
    };
  };
  trackers_list: {
    parameters: {
      query: {
        /** account */
        account?: string;
        /** The pagination cursor value. */
        cursor?: number;
        format?: "json" | "xlsx";
        /** Number of results to return per page. */
        page_size?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTrackerList"];
          "application/xlsx": components["schemas"]["PaginatedTrackerList"];
        };
      };
    };
  };
  trackers_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Tracker"];
          "application/xlsx": components["schemas"]["Tracker"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Tracker"];
        "application/x-www-form-urlencoded": components["schemas"]["Tracker"];
        "multipart/form-data": components["schemas"]["Tracker"];
      };
    };
  };
  trackers_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this tracker. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Tracker"];
          "application/xlsx": components["schemas"]["Tracker"];
        };
      };
    };
  };
  trackers_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this tracker. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Tracker"];
          "application/xlsx": components["schemas"]["Tracker"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Tracker"];
        "application/x-www-form-urlencoded": components["schemas"]["Tracker"];
        "multipart/form-data": components["schemas"]["Tracker"];
      };
    };
  };
  trackers_partial_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this tracker. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Tracker"];
          "application/xlsx": components["schemas"]["Tracker"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedTracker"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedTracker"];
        "multipart/form-data": components["schemas"]["PatchedTracker"];
      };
    };
  };
  trackers_public_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this tracker. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Tracker"];
          "application/xlsx": components["schemas"]["Tracker"];
        };
      };
    };
  };
  users_list: {
    parameters: {
      query: {
        /** The pagination cursor value. */
        cursor?: number;
        format?: "json" | "xml";
        /** Number of results to return per page. */
        page_size?: number;
        /** A search term. */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedUserList"];
          "application/xml": components["schemas"]["PaginatedUserList"];
        };
      };
    };
  };
  users_create: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
          "application/xml": components["schemas"]["User"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthenticatedUserCreate"];
        "application/xml": components["schemas"]["AuthenticatedUserCreate"];
      };
    };
  };
  users_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
      path: {
        /** A UUID string identifying this user. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
          "application/xml": components["schemas"]["User"];
        };
      };
    };
  };
  users_update: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
      path: {
        /** A UUID string identifying this user. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
          "application/xml": components["schemas"]["User"];
        };
      };
    };
  };
  users_destroy: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
      path: {
        /** A UUID string identifying this user. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
          "application/xml": components["schemas"]["User"];
        };
      };
    };
  };
  users_partial_update: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
      path: {
        /** A UUID string identifying this user. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
          "application/xml": components["schemas"]["User"];
        };
      };
    };
  };
  users_on_duty_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
      path: {
        /** A UUID string identifying this user. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
          "application/xml": components["schemas"]["User"];
        };
      };
    };
  };
  users_on_duty_update: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
      path: {
        /** A UUID string identifying this user. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
          "application/xml": components["schemas"]["User"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OnDuty"];
        "application/xml": components["schemas"]["OnDuty"];
      };
    };
  };
  users_on_duty_destroy: {
    parameters: {
      query: {
        format?: "json" | "xml";
      };
      path: {
        /** A UUID string identifying this user. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
          "application/xml": components["schemas"]["User"];
        };
      };
    };
  };
  users_on_duty_log_list: {
    parameters: {
      query: {
        /** account */
        account?: string;
        /** account_role */
        account_role?: string;
        /** The pagination cursor value. */
        cursor?: number;
        format?: "json" | "xlsx";
        /** mode */
        mode?: "online" | "offline";
        /** Which field to use when ordering the results. */
        ordering?: string;
        /** Number of results to return per page. */
        page_size?: number;
        /** status */
        status?: "on_duty" | "off_duty";
        /** user */
        user?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedWorkingStateList"];
          "application/xlsx": components["schemas"]["PaginatedWorkingStateList"];
        };
      };
    };
  };
  users_on_duty_log_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["WorkingState"];
          "application/xlsx": components["schemas"]["WorkingState"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WorkingState"];
        "application/x-www-form-urlencoded": components["schemas"]["WorkingState"];
        "multipart/form-data": components["schemas"]["WorkingState"];
      };
    };
  };
  users_on_duty_log_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this user. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["WorkingState"];
          "application/xlsx": components["schemas"]["WorkingState"];
        };
      };
    };
  };
  webhooks_list: {
    parameters: {
      query: {
        /** account */
        account?: string;
        /** The pagination cursor value. */
        cursor?: number;
        /** document_events */
        document_events?: string;
        format?: "json" | "xlsx";
        /** Which field to use when ordering the results. */
        ordering?: string;
        /** Number of results to return per page. */
        page_size?: number;
        /** A search term. */
        search?: string;
        /** signature_events */
        signature_events?: string;
        /** state */
        state?: "inactive" | "active" | "disabled";
        /** task_events */
        task_events?: string;
        /** version */
        version?: "1.0" | "2.0";
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedWebhookList"];
          "application/xlsx": components["schemas"]["PaginatedWebhookList"];
        };
      };
    };
  };
  webhooks_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Webhook"];
          "application/xlsx": components["schemas"]["Webhook"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Webhook"];
        "application/x-www-form-urlencoded": components["schemas"]["Webhook"];
        "multipart/form-data": components["schemas"]["Webhook"];
      };
    };
  };
  webhooks_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this webhook. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Webhook"];
          "application/xlsx": components["schemas"]["Webhook"];
        };
      };
    };
  };
  webhooks_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this webhook. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Webhook"];
          "application/xlsx": components["schemas"]["Webhook"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Webhook"];
        "application/x-www-form-urlencoded": components["schemas"]["Webhook"];
        "multipart/form-data": components["schemas"]["Webhook"];
      };
    };
  };
  webhooks_destroy: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this webhook. */
        id: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  webhooks_partial_update: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this webhook. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Webhook"];
          "application/xlsx": components["schemas"]["Webhook"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedWebhook"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedWebhook"];
        "multipart/form-data": components["schemas"]["PatchedWebhook"];
      };
    };
  };
  webhooks_active_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this webhook. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Webhook"];
          "application/xlsx": components["schemas"]["Webhook"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Webhook"];
        "application/x-www-form-urlencoded": components["schemas"]["Webhook"];
        "multipart/form-data": components["schemas"]["Webhook"];
      };
    };
  };
  webhooks_inactive_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this webhook. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Webhook"];
          "application/xlsx": components["schemas"]["Webhook"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Webhook"];
        "application/x-www-form-urlencoded": components["schemas"]["Webhook"];
        "multipart/form-data": components["schemas"]["Webhook"];
      };
    };
  };
  worker_features_list: {
    parameters: {
      query: {
        /** The pagination cursor value. */
        cursor?: number;
        format?: "json" | "xlsx";
        /** Number of results to return per page. */
        page_size?: number;
        /** state */
        state?: "unknown" | "stopped" | "moving";
        /** user */
        user?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedWorkerFeatureList"];
          "application/xlsx": components["schemas"]["PaginatedWorkerFeatureList"];
        };
      };
    };
  };
  worker_features_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        user_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["WorkerFeature"];
          "application/xlsx": components["schemas"]["WorkerFeature"];
        };
      };
    };
  };
  worker_tracks_list: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["WorkerTrack"][];
          "application/xlsx": components["schemas"]["WorkerTrack"][];
        };
      };
    };
  };
  working_state_list: {
    parameters: {
      query: {
        /** account */
        account?: string;
        /** account_role */
        account_role?: string;
        /** The pagination cursor value. */
        cursor?: number;
        format?: "json" | "xlsx";
        /** mode */
        mode?: "online" | "offline";
        /** Which field to use when ordering the results. */
        ordering?: string;
        /** Number of results to return per page. */
        page_size?: number;
        /** status */
        status?: "on_duty" | "off_duty";
        /** user */
        user?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedWorkingStateList"];
          "application/xlsx": components["schemas"]["PaginatedWorkingStateList"];
        };
      };
    };
  };
  working_state_create: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["WorkingState"];
          "application/xlsx": components["schemas"]["WorkingState"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WorkingState"];
        "application/x-www-form-urlencoded": components["schemas"]["WorkingState"];
        "multipart/form-data": components["schemas"]["WorkingState"];
      };
    };
  };
  working_state_retrieve: {
    parameters: {
      query: {
        format?: "json" | "xlsx";
      };
      path: {
        /** A UUID string identifying this user. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["WorkingState"];
          "application/xlsx": components["schemas"]["WorkingState"];
        };
      };
    };
  };
}

export interface external {}
